package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityEvent;
import com.consistent.ucwrt.model.EntityEventModel;
import com.consistent.ucwrt.model.EntityEventSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityEvent service. Represents a row in the &quot;Event&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityEventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityEventImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityEventImpl
 * @see com.consistent.ucwrt.model.EntityEvent
 * @see com.consistent.ucwrt.model.EntityEventModel
 * @generated
 */
@JSON(strict = true)
public class EntityEventModelImpl extends BaseModelImpl<EntityEvent>
    implements EntityEventModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity event model instance should use the {@link com.consistent.ucwrt.model.EntityEvent} interface instead.
     */
    public static final String TABLE_NAME = "Event";
    public static final Object[][] TABLE_COLUMNS = {
            { "eventId", Types.INTEGER },
            { "eventName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Event (eventId INTEGER not null primary key,eventName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Event";
    public static final String ORDER_BY_JPQL = " ORDER BY entityEvent.eventId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Event.eventId ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityEvent"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityEvent"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityEvent"));
    private static ClassLoader _classLoader = EntityEvent.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityEvent.class
        };
    private int _eventId;
    private String _eventName;
    private EntityEvent _escapedModel;

    public EntityEventModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityEvent toModel(EntityEventSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityEvent model = new EntityEventImpl();

        model.setEventId(soapModel.getEventId());
        model.setEventName(soapModel.getEventName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityEvent> toModels(EntityEventSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityEvent> models = new ArrayList<EntityEvent>(soapModels.length);

        for (EntityEventSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _eventId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setEventId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _eventId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EntityEvent.class;
    }

    @Override
    public String getModelClassName() {
        return EntityEvent.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("eventId", getEventId());
        attributes.put("eventName", getEventName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer eventId = (Integer) attributes.get("eventId");

        if (eventId != null) {
            setEventId(eventId);
        }

        String eventName = (String) attributes.get("eventName");

        if (eventName != null) {
            setEventName(eventName);
        }
    }

    @JSON
    @Override
    public int getEventId() {
        return _eventId;
    }

    @Override
    public void setEventId(int eventId) {
        _eventId = eventId;
    }

    @JSON
    @Override
    public String getEventName() {
        if (_eventName == null) {
            return StringPool.BLANK;
        } else {
            return _eventName;
        }
    }

    @Override
    public void setEventName(String eventName) {
        _eventName = eventName;
    }

    @Override
    public EntityEvent toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityEvent) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityEventImpl entityEventImpl = new EntityEventImpl();

        entityEventImpl.setEventId(getEventId());
        entityEventImpl.setEventName(getEventName());

        entityEventImpl.resetOriginalValues();

        return entityEventImpl;
    }

    @Override
    public int compareTo(EntityEvent entityEvent) {
        int primaryKey = entityEvent.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityEvent)) {
            return false;
        }

        EntityEvent entityEvent = (EntityEvent) obj;

        int primaryKey = entityEvent.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<EntityEvent> toCacheModel() {
        EntityEventCacheModel entityEventCacheModel = new EntityEventCacheModel();

        entityEventCacheModel.eventId = getEventId();

        entityEventCacheModel.eventName = getEventName();

        String eventName = entityEventCacheModel.eventName;

        if ((eventName != null) && (eventName.length() == 0)) {
            entityEventCacheModel.eventName = null;
        }

        return entityEventCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{eventId=");
        sb.append(getEventId());
        sb.append(", eventName=");
        sb.append(getEventName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityEvent");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>eventId</column-name><column-value><![CDATA[");
        sb.append(getEventId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>eventName</column-name><column-value><![CDATA[");
        sb.append(getEventName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
