package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityMunicipality;
import com.consistent.ucwrt.model.EntityMunicipalityModel;
import com.consistent.ucwrt.model.EntityMunicipalitySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityMunicipality service. Represents a row in the &quot;Municipality&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityMunicipalityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityMunicipalityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityMunicipalityImpl
 * @see com.consistent.ucwrt.model.EntityMunicipality
 * @see com.consistent.ucwrt.model.EntityMunicipalityModel
 * @generated
 */
@JSON(strict = true)
public class EntityMunicipalityModelImpl extends BaseModelImpl<EntityMunicipality>
    implements EntityMunicipalityModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity municipality model instance should use the {@link com.consistent.ucwrt.model.EntityMunicipality} interface instead.
     */
    public static final String TABLE_NAME = "Municipality";
    public static final Object[][] TABLE_COLUMNS = {
            { "municipalId", Types.INTEGER },
            { "municipalName", Types.VARCHAR },
            { "stateId", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Municipality (municipalId INTEGER not null primary key,municipalName VARCHAR(75) null,stateId INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table Municipality";
    public static final String ORDER_BY_JPQL = " ORDER BY entityMunicipality.municipalId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Municipality.municipalId ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityMunicipality"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityMunicipality"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.consistent.ucwrt.model.EntityMunicipality"),
            true);
    public static long STATEID_COLUMN_BITMASK = 1L;
    public static long MUNICIPALID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityMunicipality"));
    private static ClassLoader _classLoader = EntityMunicipality.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityMunicipality.class
        };
    private int _municipalId;
    private String _municipalName;
    private int _stateId;
    private int _originalStateId;
    private boolean _setOriginalStateId;
    private long _columnBitmask;
    private EntityMunicipality _escapedModel;

    public EntityMunicipalityModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityMunicipality toModel(EntityMunicipalitySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityMunicipality model = new EntityMunicipalityImpl();

        model.setMunicipalId(soapModel.getMunicipalId());
        model.setMunicipalName(soapModel.getMunicipalName());
        model.setStateId(soapModel.getStateId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityMunicipality> toModels(
        EntityMunicipalitySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityMunicipality> models = new ArrayList<EntityMunicipality>(soapModels.length);

        for (EntityMunicipalitySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _municipalId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setMunicipalId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _municipalId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EntityMunicipality.class;
    }

    @Override
    public String getModelClassName() {
        return EntityMunicipality.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("municipalId", getMunicipalId());
        attributes.put("municipalName", getMunicipalName());
        attributes.put("stateId", getStateId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer municipalId = (Integer) attributes.get("municipalId");

        if (municipalId != null) {
            setMunicipalId(municipalId);
        }

        String municipalName = (String) attributes.get("municipalName");

        if (municipalName != null) {
            setMunicipalName(municipalName);
        }

        Integer stateId = (Integer) attributes.get("stateId");

        if (stateId != null) {
            setStateId(stateId);
        }
    }

    @JSON
    @Override
    public int getMunicipalId() {
        return _municipalId;
    }

    @Override
    public void setMunicipalId(int municipalId) {
        _municipalId = municipalId;
    }

    @JSON
    @Override
    public String getMunicipalName() {
        if (_municipalName == null) {
            return StringPool.BLANK;
        } else {
            return _municipalName;
        }
    }

    @Override
    public void setMunicipalName(String municipalName) {
        _municipalName = municipalName;
    }

    @JSON
    @Override
    public int getStateId() {
        return _stateId;
    }

    @Override
    public void setStateId(int stateId) {
        _columnBitmask |= STATEID_COLUMN_BITMASK;

        if (!_setOriginalStateId) {
            _setOriginalStateId = true;

            _originalStateId = _stateId;
        }

        _stateId = stateId;
    }

    public int getOriginalStateId() {
        return _originalStateId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public EntityMunicipality toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityMunicipality) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityMunicipalityImpl entityMunicipalityImpl = new EntityMunicipalityImpl();

        entityMunicipalityImpl.setMunicipalId(getMunicipalId());
        entityMunicipalityImpl.setMunicipalName(getMunicipalName());
        entityMunicipalityImpl.setStateId(getStateId());

        entityMunicipalityImpl.resetOriginalValues();

        return entityMunicipalityImpl;
    }

    @Override
    public int compareTo(EntityMunicipality entityMunicipality) {
        int primaryKey = entityMunicipality.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityMunicipality)) {
            return false;
        }

        EntityMunicipality entityMunicipality = (EntityMunicipality) obj;

        int primaryKey = entityMunicipality.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EntityMunicipalityModelImpl entityMunicipalityModelImpl = this;

        entityMunicipalityModelImpl._originalStateId = entityMunicipalityModelImpl._stateId;

        entityMunicipalityModelImpl._setOriginalStateId = false;

        entityMunicipalityModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EntityMunicipality> toCacheModel() {
        EntityMunicipalityCacheModel entityMunicipalityCacheModel = new EntityMunicipalityCacheModel();

        entityMunicipalityCacheModel.municipalId = getMunicipalId();

        entityMunicipalityCacheModel.municipalName = getMunicipalName();

        String municipalName = entityMunicipalityCacheModel.municipalName;

        if ((municipalName != null) && (municipalName.length() == 0)) {
            entityMunicipalityCacheModel.municipalName = null;
        }

        entityMunicipalityCacheModel.stateId = getStateId();

        return entityMunicipalityCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{municipalId=");
        sb.append(getMunicipalId());
        sb.append(", municipalName=");
        sb.append(getMunicipalName());
        sb.append(", stateId=");
        sb.append(getStateId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityMunicipality");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>municipalId</column-name><column-value><![CDATA[");
        sb.append(getMunicipalId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>municipalName</column-name><column-value><![CDATA[");
        sb.append(getMunicipalName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stateId</column-name><column-value><![CDATA[");
        sb.append(getStateId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
