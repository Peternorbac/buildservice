package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityVersionEquipment;
import com.consistent.ucwrt.model.EntityVersionEquipmentModel;
import com.consistent.ucwrt.model.EntityVersionEquipmentSoap;
import com.consistent.ucwrt.service.persistence.EntityVersionEquipmentPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityVersionEquipment service. Represents a row in the &quot;VersionEquipment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityVersionEquipmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityVersionEquipmentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityVersionEquipmentImpl
 * @see com.consistent.ucwrt.model.EntityVersionEquipment
 * @see com.consistent.ucwrt.model.EntityVersionEquipmentModel
 * @generated
 */
@JSON(strict = true)
public class EntityVersionEquipmentModelImpl extends BaseModelImpl<EntityVersionEquipment>
    implements EntityVersionEquipmentModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity version equipment model instance should use the {@link com.consistent.ucwrt.model.EntityVersionEquipment} interface instead.
     */
    public static final String TABLE_NAME = "VersionEquipment";
    public static final Object[][] TABLE_COLUMNS = {
            { "equipmentId", Types.INTEGER },
            { "versionId", Types.INTEGER },
            { "modelId", Types.INTEGER },
            { "brandName", Types.VARCHAR },
            { "yearModel", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table VersionEquipment (equipmentId INTEGER not null,versionId INTEGER not null,modelId INTEGER not null,brandName VARCHAR(75) not null,yearModel INTEGER not null,primary key (equipmentId, versionId, modelId, brandName, yearModel))";
    public static final String TABLE_SQL_DROP = "drop table VersionEquipment";
    public static final String ORDER_BY_JPQL = " ORDER BY entityVersionEquipment.id.equipmentId ASC, entityVersionEquipment.id.versionId ASC, entityVersionEquipment.id.modelId ASC, entityVersionEquipment.id.brandName ASC, entityVersionEquipment.id.yearModel ASC";
    public static final String ORDER_BY_SQL = " ORDER BY VersionEquipment.equipmentId ASC, VersionEquipment.versionId ASC, VersionEquipment.modelId ASC, VersionEquipment.brandName ASC, VersionEquipment.yearModel ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityVersionEquipment"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityVersionEquipment"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityVersionEquipment"));
    private static ClassLoader _classLoader = EntityVersionEquipment.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityVersionEquipment.class
        };
    private int _equipmentId;
    private int _versionId;
    private int _modelId;
    private String _brandName;
    private int _yearModel;
    private EntityVersionEquipment _escapedModel;

    public EntityVersionEquipmentModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityVersionEquipment toModel(
        EntityVersionEquipmentSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityVersionEquipment model = new EntityVersionEquipmentImpl();

        model.setEquipmentId(soapModel.getEquipmentId());
        model.setVersionId(soapModel.getVersionId());
        model.setModelId(soapModel.getModelId());
        model.setBrandName(soapModel.getBrandName());
        model.setYearModel(soapModel.getYearModel());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityVersionEquipment> toModels(
        EntityVersionEquipmentSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityVersionEquipment> models = new ArrayList<EntityVersionEquipment>(soapModels.length);

        for (EntityVersionEquipmentSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public EntityVersionEquipmentPK getPrimaryKey() {
        return new EntityVersionEquipmentPK(_equipmentId, _versionId, _modelId,
            _brandName, _yearModel);
    }

    @Override
    public void setPrimaryKey(EntityVersionEquipmentPK primaryKey) {
        setEquipmentId(primaryKey.equipmentId);
        setVersionId(primaryKey.versionId);
        setModelId(primaryKey.modelId);
        setBrandName(primaryKey.brandName);
        setYearModel(primaryKey.yearModel);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new EntityVersionEquipmentPK(_equipmentId, _versionId, _modelId,
            _brandName, _yearModel);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((EntityVersionEquipmentPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return EntityVersionEquipment.class;
    }

    @Override
    public String getModelClassName() {
        return EntityVersionEquipment.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("equipmentId", getEquipmentId());
        attributes.put("versionId", getVersionId());
        attributes.put("modelId", getModelId());
        attributes.put("brandName", getBrandName());
        attributes.put("yearModel", getYearModel());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer equipmentId = (Integer) attributes.get("equipmentId");

        if (equipmentId != null) {
            setEquipmentId(equipmentId);
        }

        Integer versionId = (Integer) attributes.get("versionId");

        if (versionId != null) {
            setVersionId(versionId);
        }

        Integer modelId = (Integer) attributes.get("modelId");

        if (modelId != null) {
            setModelId(modelId);
        }

        String brandName = (String) attributes.get("brandName");

        if (brandName != null) {
            setBrandName(brandName);
        }

        Integer yearModel = (Integer) attributes.get("yearModel");

        if (yearModel != null) {
            setYearModel(yearModel);
        }
    }

    @JSON
    @Override
    public int getEquipmentId() {
        return _equipmentId;
    }

    @Override
    public void setEquipmentId(int equipmentId) {
        _equipmentId = equipmentId;
    }

    @JSON
    @Override
    public int getVersionId() {
        return _versionId;
    }

    @Override
    public void setVersionId(int versionId) {
        _versionId = versionId;
    }

    @JSON
    @Override
    public int getModelId() {
        return _modelId;
    }

    @Override
    public void setModelId(int modelId) {
        _modelId = modelId;
    }

    @JSON
    @Override
    public String getBrandName() {
        if (_brandName == null) {
            return StringPool.BLANK;
        } else {
            return _brandName;
        }
    }

    @Override
    public void setBrandName(String brandName) {
        _brandName = brandName;
    }

    @JSON
    @Override
    public int getYearModel() {
        return _yearModel;
    }

    @Override
    public void setYearModel(int yearModel) {
        _yearModel = yearModel;
    }

    @Override
    public EntityVersionEquipment toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityVersionEquipment) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityVersionEquipmentImpl entityVersionEquipmentImpl = new EntityVersionEquipmentImpl();

        entityVersionEquipmentImpl.setEquipmentId(getEquipmentId());
        entityVersionEquipmentImpl.setVersionId(getVersionId());
        entityVersionEquipmentImpl.setModelId(getModelId());
        entityVersionEquipmentImpl.setBrandName(getBrandName());
        entityVersionEquipmentImpl.setYearModel(getYearModel());

        entityVersionEquipmentImpl.resetOriginalValues();

        return entityVersionEquipmentImpl;
    }

    @Override
    public int compareTo(EntityVersionEquipment entityVersionEquipment) {
        EntityVersionEquipmentPK primaryKey = entityVersionEquipment.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityVersionEquipment)) {
            return false;
        }

        EntityVersionEquipment entityVersionEquipment = (EntityVersionEquipment) obj;

        EntityVersionEquipmentPK primaryKey = entityVersionEquipment.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<EntityVersionEquipment> toCacheModel() {
        EntityVersionEquipmentCacheModel entityVersionEquipmentCacheModel = new EntityVersionEquipmentCacheModel();

        entityVersionEquipmentCacheModel.equipmentId = getEquipmentId();

        entityVersionEquipmentCacheModel.versionId = getVersionId();

        entityVersionEquipmentCacheModel.modelId = getModelId();

        entityVersionEquipmentCacheModel.brandName = getBrandName();

        String brandName = entityVersionEquipmentCacheModel.brandName;

        if ((brandName != null) && (brandName.length() == 0)) {
            entityVersionEquipmentCacheModel.brandName = null;
        }

        entityVersionEquipmentCacheModel.yearModel = getYearModel();

        return entityVersionEquipmentCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{equipmentId=");
        sb.append(getEquipmentId());
        sb.append(", versionId=");
        sb.append(getVersionId());
        sb.append(", modelId=");
        sb.append(getModelId());
        sb.append(", brandName=");
        sb.append(getBrandName());
        sb.append(", yearModel=");
        sb.append(getYearModel());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityVersionEquipment");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>equipmentId</column-name><column-value><![CDATA[");
        sb.append(getEquipmentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>versionId</column-name><column-value><![CDATA[");
        sb.append(getVersionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelId</column-name><column-value><![CDATA[");
        sb.append(getModelId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandName</column-name><column-value><![CDATA[");
        sb.append(getBrandName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>yearModel</column-name><column-value><![CDATA[");
        sb.append(getYearModel());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
