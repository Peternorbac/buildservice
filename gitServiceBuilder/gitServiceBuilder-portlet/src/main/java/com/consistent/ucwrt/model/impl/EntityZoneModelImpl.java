package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityZone;
import com.consistent.ucwrt.model.EntityZoneModel;
import com.consistent.ucwrt.model.EntityZoneSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityZone service. Represents a row in the &quot;Zone&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityZoneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityZoneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityZoneImpl
 * @see com.consistent.ucwrt.model.EntityZone
 * @see com.consistent.ucwrt.model.EntityZoneModel
 * @generated
 */
@JSON(strict = true)
public class EntityZoneModelImpl extends BaseModelImpl<EntityZone>
    implements EntityZoneModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity zone model instance should use the {@link com.consistent.ucwrt.model.EntityZone} interface instead.
     */
    public static final String TABLE_NAME = "Zone";
    public static final Object[][] TABLE_COLUMNS = {
            { "zoneName", Types.VARCHAR },
            { "descriptionZone", Types.VARCHAR },
            { "userZoneManager", Types.VARCHAR },
            { "userSalesAreaManager", Types.VARCHAR },
            { "userRegionalAreaManager", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Zone (zoneName VARCHAR(75) not null primary key,descriptionZone VARCHAR(75) null,userZoneManager VARCHAR(75) null,userSalesAreaManager VARCHAR(75) null,userRegionalAreaManager VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Zone";
    public static final String ORDER_BY_JPQL = " ORDER BY entityZone.zoneName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Zone.zoneName ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityZone"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityZone"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityZone"));
    private static ClassLoader _classLoader = EntityZone.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityZone.class
        };
    private String _zoneName;
    private String _descriptionZone;
    private String _userZoneManager;
    private String _userSalesAreaManager;
    private String _userRegionalAreaManager;
    private EntityZone _escapedModel;

    public EntityZoneModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityZone toModel(EntityZoneSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityZone model = new EntityZoneImpl();

        model.setZoneName(soapModel.getZoneName());
        model.setDescriptionZone(soapModel.getDescriptionZone());
        model.setUserZoneManager(soapModel.getUserZoneManager());
        model.setUserSalesAreaManager(soapModel.getUserSalesAreaManager());
        model.setUserRegionalAreaManager(soapModel.getUserRegionalAreaManager());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityZone> toModels(EntityZoneSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityZone> models = new ArrayList<EntityZone>(soapModels.length);

        for (EntityZoneSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _zoneName;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setZoneName(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _zoneName;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return EntityZone.class;
    }

    @Override
    public String getModelClassName() {
        return EntityZone.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("zoneName", getZoneName());
        attributes.put("descriptionZone", getDescriptionZone());
        attributes.put("userZoneManager", getUserZoneManager());
        attributes.put("userSalesAreaManager", getUserSalesAreaManager());
        attributes.put("userRegionalAreaManager", getUserRegionalAreaManager());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String zoneName = (String) attributes.get("zoneName");

        if (zoneName != null) {
            setZoneName(zoneName);
        }

        String descriptionZone = (String) attributes.get("descriptionZone");

        if (descriptionZone != null) {
            setDescriptionZone(descriptionZone);
        }

        String userZoneManager = (String) attributes.get("userZoneManager");

        if (userZoneManager != null) {
            setUserZoneManager(userZoneManager);
        }

        String userSalesAreaManager = (String) attributes.get(
                "userSalesAreaManager");

        if (userSalesAreaManager != null) {
            setUserSalesAreaManager(userSalesAreaManager);
        }

        String userRegionalAreaManager = (String) attributes.get(
                "userRegionalAreaManager");

        if (userRegionalAreaManager != null) {
            setUserRegionalAreaManager(userRegionalAreaManager);
        }
    }

    @JSON
    @Override
    public String getZoneName() {
        if (_zoneName == null) {
            return StringPool.BLANK;
        } else {
            return _zoneName;
        }
    }

    @Override
    public void setZoneName(String zoneName) {
        _zoneName = zoneName;
    }

    @JSON
    @Override
    public String getDescriptionZone() {
        if (_descriptionZone == null) {
            return StringPool.BLANK;
        } else {
            return _descriptionZone;
        }
    }

    @Override
    public void setDescriptionZone(String descriptionZone) {
        _descriptionZone = descriptionZone;
    }

    @JSON
    @Override
    public String getUserZoneManager() {
        if (_userZoneManager == null) {
            return StringPool.BLANK;
        } else {
            return _userZoneManager;
        }
    }

    @Override
    public void setUserZoneManager(String userZoneManager) {
        _userZoneManager = userZoneManager;
    }

    @JSON
    @Override
    public String getUserSalesAreaManager() {
        if (_userSalesAreaManager == null) {
            return StringPool.BLANK;
        } else {
            return _userSalesAreaManager;
        }
    }

    @Override
    public void setUserSalesAreaManager(String userSalesAreaManager) {
        _userSalesAreaManager = userSalesAreaManager;
    }

    @JSON
    @Override
    public String getUserRegionalAreaManager() {
        if (_userRegionalAreaManager == null) {
            return StringPool.BLANK;
        } else {
            return _userRegionalAreaManager;
        }
    }

    @Override
    public void setUserRegionalAreaManager(String userRegionalAreaManager) {
        _userRegionalAreaManager = userRegionalAreaManager;
    }

    @Override
    public EntityZone toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityZone) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityZoneImpl entityZoneImpl = new EntityZoneImpl();

        entityZoneImpl.setZoneName(getZoneName());
        entityZoneImpl.setDescriptionZone(getDescriptionZone());
        entityZoneImpl.setUserZoneManager(getUserZoneManager());
        entityZoneImpl.setUserSalesAreaManager(getUserSalesAreaManager());
        entityZoneImpl.setUserRegionalAreaManager(getUserRegionalAreaManager());

        entityZoneImpl.resetOriginalValues();

        return entityZoneImpl;
    }

    @Override
    public int compareTo(EntityZone entityZone) {
        String primaryKey = entityZone.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityZone)) {
            return false;
        }

        EntityZone entityZone = (EntityZone) obj;

        String primaryKey = entityZone.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<EntityZone> toCacheModel() {
        EntityZoneCacheModel entityZoneCacheModel = new EntityZoneCacheModel();

        entityZoneCacheModel.zoneName = getZoneName();

        String zoneName = entityZoneCacheModel.zoneName;

        if ((zoneName != null) && (zoneName.length() == 0)) {
            entityZoneCacheModel.zoneName = null;
        }

        entityZoneCacheModel.descriptionZone = getDescriptionZone();

        String descriptionZone = entityZoneCacheModel.descriptionZone;

        if ((descriptionZone != null) && (descriptionZone.length() == 0)) {
            entityZoneCacheModel.descriptionZone = null;
        }

        entityZoneCacheModel.userZoneManager = getUserZoneManager();

        String userZoneManager = entityZoneCacheModel.userZoneManager;

        if ((userZoneManager != null) && (userZoneManager.length() == 0)) {
            entityZoneCacheModel.userZoneManager = null;
        }

        entityZoneCacheModel.userSalesAreaManager = getUserSalesAreaManager();

        String userSalesAreaManager = entityZoneCacheModel.userSalesAreaManager;

        if ((userSalesAreaManager != null) &&
                (userSalesAreaManager.length() == 0)) {
            entityZoneCacheModel.userSalesAreaManager = null;
        }

        entityZoneCacheModel.userRegionalAreaManager = getUserRegionalAreaManager();

        String userRegionalAreaManager = entityZoneCacheModel.userRegionalAreaManager;

        if ((userRegionalAreaManager != null) &&
                (userRegionalAreaManager.length() == 0)) {
            entityZoneCacheModel.userRegionalAreaManager = null;
        }

        return entityZoneCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{zoneName=");
        sb.append(getZoneName());
        sb.append(", descriptionZone=");
        sb.append(getDescriptionZone());
        sb.append(", userZoneManager=");
        sb.append(getUserZoneManager());
        sb.append(", userSalesAreaManager=");
        sb.append(getUserSalesAreaManager());
        sb.append(", userRegionalAreaManager=");
        sb.append(getUserRegionalAreaManager());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityZone");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>zoneName</column-name><column-value><![CDATA[");
        sb.append(getZoneName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>descriptionZone</column-name><column-value><![CDATA[");
        sb.append(getDescriptionZone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userZoneManager</column-name><column-value><![CDATA[");
        sb.append(getUserZoneManager());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userSalesAreaManager</column-name><column-value><![CDATA[");
        sb.append(getUserSalesAreaManager());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userRegionalAreaManager</column-name><column-value><![CDATA[");
        sb.append(getUserRegionalAreaManager());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
