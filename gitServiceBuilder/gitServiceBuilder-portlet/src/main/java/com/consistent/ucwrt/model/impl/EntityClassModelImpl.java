package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityClass;
import com.consistent.ucwrt.model.EntityClassModel;
import com.consistent.ucwrt.model.EntityClassSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityClass service. Represents a row in the &quot;Class&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityClassModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityClassImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityClassImpl
 * @see com.consistent.ucwrt.model.EntityClass
 * @see com.consistent.ucwrt.model.EntityClassModel
 * @generated
 */
@JSON(strict = true)
public class EntityClassModelImpl extends BaseModelImpl<EntityClass>
    implements EntityClassModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity class model instance should use the {@link com.consistent.ucwrt.model.EntityClass} interface instead.
     */
    public static final String TABLE_NAME = "Class";
    public static final Object[][] TABLE_COLUMNS = {
            { "classId", Types.INTEGER },
            { "className", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Class (classId INTEGER not null primary key,className VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Class";
    public static final String ORDER_BY_JPQL = " ORDER BY entityClass.classId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Class.classId ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityClass"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityClass"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.consistent.ucwrt.model.EntityClass"),
            true);
    public static long CLASSID_COLUMN_BITMASK = 1L;
    public static long CLASSNAME_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityClass"));
    private static ClassLoader _classLoader = EntityClass.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityClass.class
        };
    private int _classId;
    private int _originalClassId;
    private boolean _setOriginalClassId;
    private String _className;
    private String _originalClassName;
    private long _columnBitmask;
    private EntityClass _escapedModel;

    public EntityClassModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityClass toModel(EntityClassSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityClass model = new EntityClassImpl();

        model.setClassId(soapModel.getClassId());
        model.setClassName(soapModel.getClassName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityClass> toModels(EntityClassSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityClass> models = new ArrayList<EntityClass>(soapModels.length);

        for (EntityClassSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _classId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setClassId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _classId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EntityClass.class;
    }

    @Override
    public String getModelClassName() {
        return EntityClass.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("classId", getClassId());
        attributes.put("className", getClassName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer classId = (Integer) attributes.get("classId");

        if (classId != null) {
            setClassId(classId);
        }

        String className = (String) attributes.get("className");

        if (className != null) {
            setClassName(className);
        }
    }

    @JSON
    @Override
    public int getClassId() {
        return _classId;
    }

    @Override
    public void setClassId(int classId) {
        _columnBitmask |= CLASSID_COLUMN_BITMASK;

        if (!_setOriginalClassId) {
            _setOriginalClassId = true;

            _originalClassId = _classId;
        }

        _classId = classId;
    }

    public int getOriginalClassId() {
        return _originalClassId;
    }

    @JSON
    @Override
    public String getClassName() {
        if (_className == null) {
            return StringPool.BLANK;
        } else {
            return _className;
        }
    }

    @Override
    public void setClassName(String className) {
        _columnBitmask |= CLASSNAME_COLUMN_BITMASK;

        if (_originalClassName == null) {
            _originalClassName = _className;
        }

        _className = className;
    }

    public String getOriginalClassName() {
        return GetterUtil.getString(_originalClassName);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public EntityClass toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityClass) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityClassImpl entityClassImpl = new EntityClassImpl();

        entityClassImpl.setClassId(getClassId());
        entityClassImpl.setClassName(getClassName());

        entityClassImpl.resetOriginalValues();

        return entityClassImpl;
    }

    @Override
    public int compareTo(EntityClass entityClass) {
        int primaryKey = entityClass.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityClass)) {
            return false;
        }

        EntityClass entityClass = (EntityClass) obj;

        int primaryKey = entityClass.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EntityClassModelImpl entityClassModelImpl = this;

        entityClassModelImpl._originalClassId = entityClassModelImpl._classId;

        entityClassModelImpl._setOriginalClassId = false;

        entityClassModelImpl._originalClassName = entityClassModelImpl._className;

        entityClassModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EntityClass> toCacheModel() {
        EntityClassCacheModel entityClassCacheModel = new EntityClassCacheModel();

        entityClassCacheModel.classId = getClassId();

        entityClassCacheModel.className = getClassName();

        String className = entityClassCacheModel.className;

        if ((className != null) && (className.length() == 0)) {
            entityClassCacheModel.className = null;
        }

        return entityClassCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{classId=");
        sb.append(getClassId());
        sb.append(", className=");
        sb.append(getClassName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityClass");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>classId</column-name><column-value><![CDATA[");
        sb.append(getClassId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>className</column-name><column-value><![CDATA[");
        sb.append(getClassName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
