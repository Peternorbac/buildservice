package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityIntervalos;
import com.consistent.ucwrt.model.EntityIntervalosModel;
import com.consistent.ucwrt.model.EntityIntervalosSoap;
import com.consistent.ucwrt.service.persistence.EntityIntervalosPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityIntervalos service. Represents a row in the &quot;Intervalos&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityIntervalosModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityIntervalosImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityIntervalosImpl
 * @see com.consistent.ucwrt.model.EntityIntervalos
 * @see com.consistent.ucwrt.model.EntityIntervalosModel
 * @generated
 */
@JSON(strict = true)
public class EntityIntervalosModelImpl extends BaseModelImpl<EntityIntervalos>
    implements EntityIntervalosModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity intervalos model instance should use the {@link com.consistent.ucwrt.model.EntityIntervalos} interface instead.
     */
    public static final String TABLE_NAME = "Intervalos";
    public static final Object[][] TABLE_COLUMNS = {
            { "startKilometer", Types.INTEGER },
            { "finishKilometers", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Intervalos (startKilometer INTEGER not null,finishKilometers INTEGER not null,primary key (startKilometer, finishKilometers))";
    public static final String TABLE_SQL_DROP = "drop table Intervalos";
    public static final String ORDER_BY_JPQL = " ORDER BY entityIntervalos.id.startKilometer ASC, entityIntervalos.id.finishKilometers ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Intervalos.startKilometer ASC, Intervalos.finishKilometers ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityIntervalos"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityIntervalos"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityIntervalos"));
    private static ClassLoader _classLoader = EntityIntervalos.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityIntervalos.class
        };
    private int _startKilometer;
    private int _finishKilometers;
    private EntityIntervalos _escapedModel;

    public EntityIntervalosModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityIntervalos toModel(EntityIntervalosSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityIntervalos model = new EntityIntervalosImpl();

        model.setStartKilometer(soapModel.getStartKilometer());
        model.setFinishKilometers(soapModel.getFinishKilometers());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityIntervalos> toModels(
        EntityIntervalosSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityIntervalos> models = new ArrayList<EntityIntervalos>(soapModels.length);

        for (EntityIntervalosSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public EntityIntervalosPK getPrimaryKey() {
        return new EntityIntervalosPK(_startKilometer, _finishKilometers);
    }

    @Override
    public void setPrimaryKey(EntityIntervalosPK primaryKey) {
        setStartKilometer(primaryKey.startKilometer);
        setFinishKilometers(primaryKey.finishKilometers);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new EntityIntervalosPK(_startKilometer, _finishKilometers);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((EntityIntervalosPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return EntityIntervalos.class;
    }

    @Override
    public String getModelClassName() {
        return EntityIntervalos.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("startKilometer", getStartKilometer());
        attributes.put("finishKilometers", getFinishKilometers());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer startKilometer = (Integer) attributes.get("startKilometer");

        if (startKilometer != null) {
            setStartKilometer(startKilometer);
        }

        Integer finishKilometers = (Integer) attributes.get("finishKilometers");

        if (finishKilometers != null) {
            setFinishKilometers(finishKilometers);
        }
    }

    @JSON
    @Override
    public int getStartKilometer() {
        return _startKilometer;
    }

    @Override
    public void setStartKilometer(int startKilometer) {
        _startKilometer = startKilometer;
    }

    @JSON
    @Override
    public int getFinishKilometers() {
        return _finishKilometers;
    }

    @Override
    public void setFinishKilometers(int finishKilometers) {
        _finishKilometers = finishKilometers;
    }

    @Override
    public EntityIntervalos toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityIntervalos) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityIntervalosImpl entityIntervalosImpl = new EntityIntervalosImpl();

        entityIntervalosImpl.setStartKilometer(getStartKilometer());
        entityIntervalosImpl.setFinishKilometers(getFinishKilometers());

        entityIntervalosImpl.resetOriginalValues();

        return entityIntervalosImpl;
    }

    @Override
    public int compareTo(EntityIntervalos entityIntervalos) {
        EntityIntervalosPK primaryKey = entityIntervalos.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityIntervalos)) {
            return false;
        }

        EntityIntervalos entityIntervalos = (EntityIntervalos) obj;

        EntityIntervalosPK primaryKey = entityIntervalos.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<EntityIntervalos> toCacheModel() {
        EntityIntervalosCacheModel entityIntervalosCacheModel = new EntityIntervalosCacheModel();

        entityIntervalosCacheModel.startKilometer = getStartKilometer();

        entityIntervalosCacheModel.finishKilometers = getFinishKilometers();

        return entityIntervalosCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{startKilometer=");
        sb.append(getStartKilometer());
        sb.append(", finishKilometers=");
        sb.append(getFinishKilometers());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityIntervalos");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>startKilometer</column-name><column-value><![CDATA[");
        sb.append(getStartKilometer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>finishKilometers</column-name><column-value><![CDATA[");
        sb.append(getFinishKilometers());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
