package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityBrand;
import com.consistent.ucwrt.model.EntityBrandModel;
import com.consistent.ucwrt.model.EntityBrandSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityBrand service. Represents a row in the &quot;Brand&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityBrandModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityBrandImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityBrandImpl
 * @see com.consistent.ucwrt.model.EntityBrand
 * @see com.consistent.ucwrt.model.EntityBrandModel
 * @generated
 */
@JSON(strict = true)
public class EntityBrandModelImpl extends BaseModelImpl<EntityBrand>
    implements EntityBrandModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity brand model instance should use the {@link com.consistent.ucwrt.model.EntityBrand} interface instead.
     */
    public static final String TABLE_NAME = "Brand";
    public static final Object[][] TABLE_COLUMNS = {
            { "brandId", Types.INTEGER },
            { "brandName", Types.VARCHAR },
            { "brandDescription", Types.VARCHAR },
            { "brandRegistrationDate", Types.TIMESTAMP },
            { "registerData", Types.VARCHAR },
            { "responsibleUser", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Brand (brandId INTEGER not null primary key,brandName VARCHAR(75) null,brandDescription VARCHAR(75) null,brandRegistrationDate DATE null,registerData VARCHAR(75) null,responsibleUser VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Brand";
    public static final String ORDER_BY_JPQL = " ORDER BY entityBrand.brandId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Brand.brandId ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityBrand"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityBrand"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.consistent.ucwrt.model.EntityBrand"),
            true);
    public static long BRANDID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityBrand"));
    private static ClassLoader _classLoader = EntityBrand.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityBrand.class
        };
    private int _brandId;
    private int _originalBrandId;
    private boolean _setOriginalBrandId;
    private String _brandName;
    private String _brandDescription;
    private Date _brandRegistrationDate;
    private String _registerData;
    private String _responsibleUser;
    private long _columnBitmask;
    private EntityBrand _escapedModel;

    public EntityBrandModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityBrand toModel(EntityBrandSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityBrand model = new EntityBrandImpl();

        model.setBrandId(soapModel.getBrandId());
        model.setBrandName(soapModel.getBrandName());
        model.setBrandDescription(soapModel.getBrandDescription());
        model.setBrandRegistrationDate(soapModel.getBrandRegistrationDate());
        model.setRegisterData(soapModel.getRegisterData());
        model.setResponsibleUser(soapModel.getResponsibleUser());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityBrand> toModels(EntityBrandSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityBrand> models = new ArrayList<EntityBrand>(soapModels.length);

        for (EntityBrandSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _brandId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setBrandId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _brandId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EntityBrand.class;
    }

    @Override
    public String getModelClassName() {
        return EntityBrand.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("brandId", getBrandId());
        attributes.put("brandName", getBrandName());
        attributes.put("brandDescription", getBrandDescription());
        attributes.put("brandRegistrationDate", getBrandRegistrationDate());
        attributes.put("registerData", getRegisterData());
        attributes.put("responsibleUser", getResponsibleUser());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer brandId = (Integer) attributes.get("brandId");

        if (brandId != null) {
            setBrandId(brandId);
        }

        String brandName = (String) attributes.get("brandName");

        if (brandName != null) {
            setBrandName(brandName);
        }

        String brandDescription = (String) attributes.get("brandDescription");

        if (brandDescription != null) {
            setBrandDescription(brandDescription);
        }

        Date brandRegistrationDate = (Date) attributes.get(
                "brandRegistrationDate");

        if (brandRegistrationDate != null) {
            setBrandRegistrationDate(brandRegistrationDate);
        }

        String registerData = (String) attributes.get("registerData");

        if (registerData != null) {
            setRegisterData(registerData);
        }

        String responsibleUser = (String) attributes.get("responsibleUser");

        if (responsibleUser != null) {
            setResponsibleUser(responsibleUser);
        }
    }

    @JSON
    @Override
    public int getBrandId() {
        return _brandId;
    }

    @Override
    public void setBrandId(int brandId) {
        _columnBitmask |= BRANDID_COLUMN_BITMASK;

        if (!_setOriginalBrandId) {
            _setOriginalBrandId = true;

            _originalBrandId = _brandId;
        }

        _brandId = brandId;
    }

    public int getOriginalBrandId() {
        return _originalBrandId;
    }

    @JSON
    @Override
    public String getBrandName() {
        if (_brandName == null) {
            return StringPool.BLANK;
        } else {
            return _brandName;
        }
    }

    @Override
    public void setBrandName(String brandName) {
        _brandName = brandName;
    }

    @JSON
    @Override
    public String getBrandDescription() {
        if (_brandDescription == null) {
            return StringPool.BLANK;
        } else {
            return _brandDescription;
        }
    }

    @Override
    public void setBrandDescription(String brandDescription) {
        _brandDescription = brandDescription;
    }

    @JSON
    @Override
    public Date getBrandRegistrationDate() {
        return _brandRegistrationDate;
    }

    @Override
    public void setBrandRegistrationDate(Date brandRegistrationDate) {
        _brandRegistrationDate = brandRegistrationDate;
    }

    @JSON
    @Override
    public String getRegisterData() {
        if (_registerData == null) {
            return StringPool.BLANK;
        } else {
            return _registerData;
        }
    }

    @Override
    public void setRegisterData(String registerData) {
        _registerData = registerData;
    }

    @JSON
    @Override
    public String getResponsibleUser() {
        if (_responsibleUser == null) {
            return StringPool.BLANK;
        } else {
            return _responsibleUser;
        }
    }

    @Override
    public void setResponsibleUser(String responsibleUser) {
        _responsibleUser = responsibleUser;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public EntityBrand toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityBrand) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityBrandImpl entityBrandImpl = new EntityBrandImpl();

        entityBrandImpl.setBrandId(getBrandId());
        entityBrandImpl.setBrandName(getBrandName());
        entityBrandImpl.setBrandDescription(getBrandDescription());
        entityBrandImpl.setBrandRegistrationDate(getBrandRegistrationDate());
        entityBrandImpl.setRegisterData(getRegisterData());
        entityBrandImpl.setResponsibleUser(getResponsibleUser());

        entityBrandImpl.resetOriginalValues();

        return entityBrandImpl;
    }

    @Override
    public int compareTo(EntityBrand entityBrand) {
        int primaryKey = entityBrand.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityBrand)) {
            return false;
        }

        EntityBrand entityBrand = (EntityBrand) obj;

        int primaryKey = entityBrand.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EntityBrandModelImpl entityBrandModelImpl = this;

        entityBrandModelImpl._originalBrandId = entityBrandModelImpl._brandId;

        entityBrandModelImpl._setOriginalBrandId = false;

        entityBrandModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EntityBrand> toCacheModel() {
        EntityBrandCacheModel entityBrandCacheModel = new EntityBrandCacheModel();

        entityBrandCacheModel.brandId = getBrandId();

        entityBrandCacheModel.brandName = getBrandName();

        String brandName = entityBrandCacheModel.brandName;

        if ((brandName != null) && (brandName.length() == 0)) {
            entityBrandCacheModel.brandName = null;
        }

        entityBrandCacheModel.brandDescription = getBrandDescription();

        String brandDescription = entityBrandCacheModel.brandDescription;

        if ((brandDescription != null) && (brandDescription.length() == 0)) {
            entityBrandCacheModel.brandDescription = null;
        }

        Date brandRegistrationDate = getBrandRegistrationDate();

        if (brandRegistrationDate != null) {
            entityBrandCacheModel.brandRegistrationDate = brandRegistrationDate.getTime();
        } else {
            entityBrandCacheModel.brandRegistrationDate = Long.MIN_VALUE;
        }

        entityBrandCacheModel.registerData = getRegisterData();

        String registerData = entityBrandCacheModel.registerData;

        if ((registerData != null) && (registerData.length() == 0)) {
            entityBrandCacheModel.registerData = null;
        }

        entityBrandCacheModel.responsibleUser = getResponsibleUser();

        String responsibleUser = entityBrandCacheModel.responsibleUser;

        if ((responsibleUser != null) && (responsibleUser.length() == 0)) {
            entityBrandCacheModel.responsibleUser = null;
        }

        return entityBrandCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{brandId=");
        sb.append(getBrandId());
        sb.append(", brandName=");
        sb.append(getBrandName());
        sb.append(", brandDescription=");
        sb.append(getBrandDescription());
        sb.append(", brandRegistrationDate=");
        sb.append(getBrandRegistrationDate());
        sb.append(", registerData=");
        sb.append(getRegisterData());
        sb.append(", responsibleUser=");
        sb.append(getResponsibleUser());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityBrand");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>brandId</column-name><column-value><![CDATA[");
        sb.append(getBrandId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandName</column-name><column-value><![CDATA[");
        sb.append(getBrandName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandDescription</column-name><column-value><![CDATA[");
        sb.append(getBrandDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandRegistrationDate</column-name><column-value><![CDATA[");
        sb.append(getBrandRegistrationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>registerData</column-name><column-value><![CDATA[");
        sb.append(getRegisterData());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>responsibleUser</column-name><column-value><![CDATA[");
        sb.append(getResponsibleUser());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
