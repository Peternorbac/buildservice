package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityInventory;
import com.consistent.ucwrt.model.EntityInventoryModel;
import com.consistent.ucwrt.model.EntityInventorySoap;
import com.consistent.ucwrt.service.persistence.EntityInventoryPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityInventory service. Represents a row in the &quot;Inventory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityInventoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityInventoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityInventoryImpl
 * @see com.consistent.ucwrt.model.EntityInventory
 * @see com.consistent.ucwrt.model.EntityInventoryModel
 * @generated
 */
@JSON(strict = true)
public class EntityInventoryModelImpl extends BaseModelImpl<EntityInventory>
    implements EntityInventoryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity inventory model instance should use the {@link com.consistent.ucwrt.model.EntityInventory} interface instead.
     */
    public static final String TABLE_NAME = "Inventory";
    public static final Object[][] TABLE_COLUMNS = {
            { "inventoryId", Types.INTEGER },
            { "dealerId", Types.VARCHAR },
            { "businessBrandName", Types.VARCHAR },
            { "versionId", Types.INTEGER },
            { "yearModel", Types.INTEGER },
            { "brandId", Types.INTEGER },
            { "modelId", Types.INTEGER },
            { "carExchange", Types.VARCHAR },
            { "chasis", Types.VARCHAR },
            { "kilometer", Types.DOUBLE },
            { "numberDoors", Types.INTEGER },
            { "purchasePrice", Types.DOUBLE },
            { "damage", Types.DOUBLE },
            { "estimatedSalePrice", Types.DOUBLE },
            { "estimatedGrossProfit", Types.DOUBLE },
            { "dateAdmission", Types.TIMESTAMP },
            { "selfCertified", Types.VARCHAR },
            { "inventoryRegistrationDate", Types.TIMESTAMP },
            { "whatProcessDischarged", Types.VARCHAR },
            { "engineLiters", Types.VARCHAR },
            { "transmission", Types.VARCHAR },
            { "location", Types.VARCHAR },
            { "hp", Types.INTEGER },
            { "carToConsignment", Types.VARCHAR },
            { "comments", Types.VARCHAR },
            { "status", Types.VARCHAR },
            { "color", Types.VARCHAR },
            { "daysSpentInventory", Types.VARCHAR },
            { "suggestedPricePurchase", Types.DOUBLE },
            { "suggestedSalePrice", Types.DOUBLE },
            { "versionPricePurchaseSale", Types.INTEGER },
            { "statusName", Types.VARCHAR },
            { "sourceSupplyId", Types.INTEGER },
            { "inventoryClasificationId", Types.INTEGER },
            { "saleId", Types.INTEGER },
            { "tradeInId", Types.VARCHAR },
            { "employeeId", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Inventory (inventoryId INTEGER not null,dealerId VARCHAR(75) not null,businessBrandName VARCHAR(75) not null,versionId INTEGER not null,yearModel INTEGER not null,brandId INTEGER not null,modelId INTEGER not null,carExchange VARCHAR(75) null,chasis VARCHAR(75) null,kilometer DOUBLE,numberDoors INTEGER,purchasePrice DOUBLE,damage DOUBLE,estimatedSalePrice DOUBLE,estimatedGrossProfit DOUBLE,dateAdmission DATE null,selfCertified VARCHAR(75) null,inventoryRegistrationDate DATE null,whatProcessDischarged VARCHAR(75) null,engineLiters VARCHAR(75) null,transmission VARCHAR(75) null,location VARCHAR(75) null,hp INTEGER,carToConsignment VARCHAR(75) null,comments VARCHAR(75) null,status VARCHAR(75) null,color VARCHAR(75) null,daysSpentInventory VARCHAR(75) null,suggestedPricePurchase DOUBLE,suggestedSalePrice DOUBLE,versionPricePurchaseSale INTEGER,statusName VARCHAR(75) null,sourceSupplyId INTEGER,inventoryClasificationId INTEGER,saleId INTEGER,tradeInId VARCHAR(75) null,employeeId INTEGER,primary key (inventoryId, dealerId, businessBrandName, versionId, yearModel, brandId, modelId))";
    public static final String TABLE_SQL_DROP = "drop table Inventory";
    public static final String ORDER_BY_JPQL = " ORDER BY entityInventory.id.inventoryId ASC, entityInventory.id.dealerId ASC, entityInventory.id.businessBrandName ASC, entityInventory.id.versionId ASC, entityInventory.id.yearModel ASC, entityInventory.id.brandId ASC, entityInventory.id.modelId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Inventory.inventoryId ASC, Inventory.dealerId ASC, Inventory.businessBrandName ASC, Inventory.versionId ASC, Inventory.yearModel ASC, Inventory.brandId ASC, Inventory.modelId ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityInventory"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityInventory"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.consistent.ucwrt.model.EntityInventory"),
            true);
    public static long DEALERID_COLUMN_BITMASK = 1L;
    public static long INVENTORYID_COLUMN_BITMASK = 2L;
    public static long BUSINESSBRANDNAME_COLUMN_BITMASK = 4L;
    public static long VERSIONID_COLUMN_BITMASK = 8L;
    public static long YEARMODEL_COLUMN_BITMASK = 16L;
    public static long BRANDID_COLUMN_BITMASK = 32L;
    public static long MODELID_COLUMN_BITMASK = 64L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityInventory"));
    private static ClassLoader _classLoader = EntityInventory.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityInventory.class
        };
    private int _inventoryId;
    private String _dealerId;
    private String _originalDealerId;
    private String _businessBrandName;
    private int _versionId;
    private int _yearModel;
    private int _brandId;
    private int _modelId;
    private String _carExchange;
    private String _chasis;
    private double _kilometer;
    private int _numberDoors;
    private double _purchasePrice;
    private double _damage;
    private double _estimatedSalePrice;
    private double _estimatedGrossProfit;
    private Date _dateAdmission;
    private String _selfCertified;
    private Date _inventoryRegistrationDate;
    private String _whatProcessDischarged;
    private String _engineLiters;
    private String _transmission;
    private String _location;
    private int _hp;
    private String _carToConsignment;
    private String _comments;
    private String _status;
    private String _color;
    private String _daysSpentInventory;
    private double _suggestedPricePurchase;
    private double _suggestedSalePrice;
    private int _versionPricePurchaseSale;
    private String _statusName;
    private int _sourceSupplyId;
    private int _inventoryClasificationId;
    private int _saleId;
    private String _tradeInId;
    private int _employeeId;
    private long _columnBitmask;
    private EntityInventory _escapedModel;

    public EntityInventoryModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityInventory toModel(EntityInventorySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityInventory model = new EntityInventoryImpl();

        model.setInventoryId(soapModel.getInventoryId());
        model.setDealerId(soapModel.getDealerId());
        model.setBusinessBrandName(soapModel.getBusinessBrandName());
        model.setVersionId(soapModel.getVersionId());
        model.setYearModel(soapModel.getYearModel());
        model.setBrandId(soapModel.getBrandId());
        model.setModelId(soapModel.getModelId());
        model.setCarExchange(soapModel.getCarExchange());
        model.setChasis(soapModel.getChasis());
        model.setKilometer(soapModel.getKilometer());
        model.setNumberDoors(soapModel.getNumberDoors());
        model.setPurchasePrice(soapModel.getPurchasePrice());
        model.setDamage(soapModel.getDamage());
        model.setEstimatedSalePrice(soapModel.getEstimatedSalePrice());
        model.setEstimatedGrossProfit(soapModel.getEstimatedGrossProfit());
        model.setDateAdmission(soapModel.getDateAdmission());
        model.setSelfCertified(soapModel.getSelfCertified());
        model.setInventoryRegistrationDate(soapModel.getInventoryRegistrationDate());
        model.setWhatProcessDischarged(soapModel.getWhatProcessDischarged());
        model.setEngineLiters(soapModel.getEngineLiters());
        model.setTransmission(soapModel.getTransmission());
        model.setLocation(soapModel.getLocation());
        model.setHp(soapModel.getHp());
        model.setCarToConsignment(soapModel.getCarToConsignment());
        model.setComments(soapModel.getComments());
        model.setStatus(soapModel.getStatus());
        model.setColor(soapModel.getColor());
        model.setDaysSpentInventory(soapModel.getDaysSpentInventory());
        model.setSuggestedPricePurchase(soapModel.getSuggestedPricePurchase());
        model.setSuggestedSalePrice(soapModel.getSuggestedSalePrice());
        model.setVersionPricePurchaseSale(soapModel.getVersionPricePurchaseSale());
        model.setStatusName(soapModel.getStatusName());
        model.setSourceSupplyId(soapModel.getSourceSupplyId());
        model.setInventoryClasificationId(soapModel.getInventoryClasificationId());
        model.setSaleId(soapModel.getSaleId());
        model.setTradeInId(soapModel.getTradeInId());
        model.setEmployeeId(soapModel.getEmployeeId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityInventory> toModels(
        EntityInventorySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityInventory> models = new ArrayList<EntityInventory>(soapModels.length);

        for (EntityInventorySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public EntityInventoryPK getPrimaryKey() {
        return new EntityInventoryPK(_inventoryId, _dealerId,
            _businessBrandName, _versionId, _yearModel, _brandId, _modelId);
    }

    @Override
    public void setPrimaryKey(EntityInventoryPK primaryKey) {
        setInventoryId(primaryKey.inventoryId);
        setDealerId(primaryKey.dealerId);
        setBusinessBrandName(primaryKey.businessBrandName);
        setVersionId(primaryKey.versionId);
        setYearModel(primaryKey.yearModel);
        setBrandId(primaryKey.brandId);
        setModelId(primaryKey.modelId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new EntityInventoryPK(_inventoryId, _dealerId,
            _businessBrandName, _versionId, _yearModel, _brandId, _modelId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((EntityInventoryPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return EntityInventory.class;
    }

    @Override
    public String getModelClassName() {
        return EntityInventory.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("inventoryId", getInventoryId());
        attributes.put("dealerId", getDealerId());
        attributes.put("businessBrandName", getBusinessBrandName());
        attributes.put("versionId", getVersionId());
        attributes.put("yearModel", getYearModel());
        attributes.put("brandId", getBrandId());
        attributes.put("modelId", getModelId());
        attributes.put("carExchange", getCarExchange());
        attributes.put("chasis", getChasis());
        attributes.put("kilometer", getKilometer());
        attributes.put("numberDoors", getNumberDoors());
        attributes.put("purchasePrice", getPurchasePrice());
        attributes.put("damage", getDamage());
        attributes.put("estimatedSalePrice", getEstimatedSalePrice());
        attributes.put("estimatedGrossProfit", getEstimatedGrossProfit());
        attributes.put("dateAdmission", getDateAdmission());
        attributes.put("selfCertified", getSelfCertified());
        attributes.put("inventoryRegistrationDate",
            getInventoryRegistrationDate());
        attributes.put("whatProcessDischarged", getWhatProcessDischarged());
        attributes.put("engineLiters", getEngineLiters());
        attributes.put("transmission", getTransmission());
        attributes.put("location", getLocation());
        attributes.put("hp", getHp());
        attributes.put("carToConsignment", getCarToConsignment());
        attributes.put("comments", getComments());
        attributes.put("status", getStatus());
        attributes.put("color", getColor());
        attributes.put("daysSpentInventory", getDaysSpentInventory());
        attributes.put("suggestedPricePurchase", getSuggestedPricePurchase());
        attributes.put("suggestedSalePrice", getSuggestedSalePrice());
        attributes.put("versionPricePurchaseSale", getVersionPricePurchaseSale());
        attributes.put("statusName", getStatusName());
        attributes.put("sourceSupplyId", getSourceSupplyId());
        attributes.put("inventoryClasificationId", getInventoryClasificationId());
        attributes.put("saleId", getSaleId());
        attributes.put("tradeInId", getTradeInId());
        attributes.put("employeeId", getEmployeeId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer inventoryId = (Integer) attributes.get("inventoryId");

        if (inventoryId != null) {
            setInventoryId(inventoryId);
        }

        String dealerId = (String) attributes.get("dealerId");

        if (dealerId != null) {
            setDealerId(dealerId);
        }

        String businessBrandName = (String) attributes.get("businessBrandName");

        if (businessBrandName != null) {
            setBusinessBrandName(businessBrandName);
        }

        Integer versionId = (Integer) attributes.get("versionId");

        if (versionId != null) {
            setVersionId(versionId);
        }

        Integer yearModel = (Integer) attributes.get("yearModel");

        if (yearModel != null) {
            setYearModel(yearModel);
        }

        Integer brandId = (Integer) attributes.get("brandId");

        if (brandId != null) {
            setBrandId(brandId);
        }

        Integer modelId = (Integer) attributes.get("modelId");

        if (modelId != null) {
            setModelId(modelId);
        }

        String carExchange = (String) attributes.get("carExchange");

        if (carExchange != null) {
            setCarExchange(carExchange);
        }

        String chasis = (String) attributes.get("chasis");

        if (chasis != null) {
            setChasis(chasis);
        }

        Double kilometer = (Double) attributes.get("kilometer");

        if (kilometer != null) {
            setKilometer(kilometer);
        }

        Integer numberDoors = (Integer) attributes.get("numberDoors");

        if (numberDoors != null) {
            setNumberDoors(numberDoors);
        }

        Double purchasePrice = (Double) attributes.get("purchasePrice");

        if (purchasePrice != null) {
            setPurchasePrice(purchasePrice);
        }

        Double damage = (Double) attributes.get("damage");

        if (damage != null) {
            setDamage(damage);
        }

        Double estimatedSalePrice = (Double) attributes.get(
                "estimatedSalePrice");

        if (estimatedSalePrice != null) {
            setEstimatedSalePrice(estimatedSalePrice);
        }

        Double estimatedGrossProfit = (Double) attributes.get(
                "estimatedGrossProfit");

        if (estimatedGrossProfit != null) {
            setEstimatedGrossProfit(estimatedGrossProfit);
        }

        Date dateAdmission = (Date) attributes.get("dateAdmission");

        if (dateAdmission != null) {
            setDateAdmission(dateAdmission);
        }

        String selfCertified = (String) attributes.get("selfCertified");

        if (selfCertified != null) {
            setSelfCertified(selfCertified);
        }

        Date inventoryRegistrationDate = (Date) attributes.get(
                "inventoryRegistrationDate");

        if (inventoryRegistrationDate != null) {
            setInventoryRegistrationDate(inventoryRegistrationDate);
        }

        String whatProcessDischarged = (String) attributes.get(
                "whatProcessDischarged");

        if (whatProcessDischarged != null) {
            setWhatProcessDischarged(whatProcessDischarged);
        }

        String engineLiters = (String) attributes.get("engineLiters");

        if (engineLiters != null) {
            setEngineLiters(engineLiters);
        }

        String transmission = (String) attributes.get("transmission");

        if (transmission != null) {
            setTransmission(transmission);
        }

        String location = (String) attributes.get("location");

        if (location != null) {
            setLocation(location);
        }

        Integer hp = (Integer) attributes.get("hp");

        if (hp != null) {
            setHp(hp);
        }

        String carToConsignment = (String) attributes.get("carToConsignment");

        if (carToConsignment != null) {
            setCarToConsignment(carToConsignment);
        }

        String comments = (String) attributes.get("comments");

        if (comments != null) {
            setComments(comments);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        String color = (String) attributes.get("color");

        if (color != null) {
            setColor(color);
        }

        String daysSpentInventory = (String) attributes.get(
                "daysSpentInventory");

        if (daysSpentInventory != null) {
            setDaysSpentInventory(daysSpentInventory);
        }

        Double suggestedPricePurchase = (Double) attributes.get(
                "suggestedPricePurchase");

        if (suggestedPricePurchase != null) {
            setSuggestedPricePurchase(suggestedPricePurchase);
        }

        Double suggestedSalePrice = (Double) attributes.get(
                "suggestedSalePrice");

        if (suggestedSalePrice != null) {
            setSuggestedSalePrice(suggestedSalePrice);
        }

        Integer versionPricePurchaseSale = (Integer) attributes.get(
                "versionPricePurchaseSale");

        if (versionPricePurchaseSale != null) {
            setVersionPricePurchaseSale(versionPricePurchaseSale);
        }

        String statusName = (String) attributes.get("statusName");

        if (statusName != null) {
            setStatusName(statusName);
        }

        Integer sourceSupplyId = (Integer) attributes.get("sourceSupplyId");

        if (sourceSupplyId != null) {
            setSourceSupplyId(sourceSupplyId);
        }

        Integer inventoryClasificationId = (Integer) attributes.get(
                "inventoryClasificationId");

        if (inventoryClasificationId != null) {
            setInventoryClasificationId(inventoryClasificationId);
        }

        Integer saleId = (Integer) attributes.get("saleId");

        if (saleId != null) {
            setSaleId(saleId);
        }

        String tradeInId = (String) attributes.get("tradeInId");

        if (tradeInId != null) {
            setTradeInId(tradeInId);
        }

        Integer employeeId = (Integer) attributes.get("employeeId");

        if (employeeId != null) {
            setEmployeeId(employeeId);
        }
    }

    @JSON
    @Override
    public int getInventoryId() {
        return _inventoryId;
    }

    @Override
    public void setInventoryId(int inventoryId) {
        _inventoryId = inventoryId;
    }

    @JSON
    @Override
    public String getDealerId() {
        if (_dealerId == null) {
            return StringPool.BLANK;
        } else {
            return _dealerId;
        }
    }

    @Override
    public void setDealerId(String dealerId) {
        _columnBitmask |= DEALERID_COLUMN_BITMASK;

        if (_originalDealerId == null) {
            _originalDealerId = _dealerId;
        }

        _dealerId = dealerId;
    }

    public String getOriginalDealerId() {
        return GetterUtil.getString(_originalDealerId);
    }

    @JSON
    @Override
    public String getBusinessBrandName() {
        if (_businessBrandName == null) {
            return StringPool.BLANK;
        } else {
            return _businessBrandName;
        }
    }

    @Override
    public void setBusinessBrandName(String businessBrandName) {
        _businessBrandName = businessBrandName;
    }

    @JSON
    @Override
    public int getVersionId() {
        return _versionId;
    }

    @Override
    public void setVersionId(int versionId) {
        _versionId = versionId;
    }

    @JSON
    @Override
    public int getYearModel() {
        return _yearModel;
    }

    @Override
    public void setYearModel(int yearModel) {
        _yearModel = yearModel;
    }

    @JSON
    @Override
    public int getBrandId() {
        return _brandId;
    }

    @Override
    public void setBrandId(int brandId) {
        _brandId = brandId;
    }

    @JSON
    @Override
    public int getModelId() {
        return _modelId;
    }

    @Override
    public void setModelId(int modelId) {
        _modelId = modelId;
    }

    @JSON
    @Override
    public String getCarExchange() {
        if (_carExchange == null) {
            return StringPool.BLANK;
        } else {
            return _carExchange;
        }
    }

    @Override
    public void setCarExchange(String carExchange) {
        _carExchange = carExchange;
    }

    @JSON
    @Override
    public String getChasis() {
        if (_chasis == null) {
            return StringPool.BLANK;
        } else {
            return _chasis;
        }
    }

    @Override
    public void setChasis(String chasis) {
        _chasis = chasis;
    }

    @JSON
    @Override
    public double getKilometer() {
        return _kilometer;
    }

    @Override
    public void setKilometer(double kilometer) {
        _kilometer = kilometer;
    }

    @JSON
    @Override
    public int getNumberDoors() {
        return _numberDoors;
    }

    @Override
    public void setNumberDoors(int numberDoors) {
        _numberDoors = numberDoors;
    }

    @JSON
    @Override
    public double getPurchasePrice() {
        return _purchasePrice;
    }

    @Override
    public void setPurchasePrice(double purchasePrice) {
        _purchasePrice = purchasePrice;
    }

    @JSON
    @Override
    public double getDamage() {
        return _damage;
    }

    @Override
    public void setDamage(double damage) {
        _damage = damage;
    }

    @JSON
    @Override
    public double getEstimatedSalePrice() {
        return _estimatedSalePrice;
    }

    @Override
    public void setEstimatedSalePrice(double estimatedSalePrice) {
        _estimatedSalePrice = estimatedSalePrice;
    }

    @JSON
    @Override
    public double getEstimatedGrossProfit() {
        return _estimatedGrossProfit;
    }

    @Override
    public void setEstimatedGrossProfit(double estimatedGrossProfit) {
        _estimatedGrossProfit = estimatedGrossProfit;
    }

    @JSON
    @Override
    public Date getDateAdmission() {
        return _dateAdmission;
    }

    @Override
    public void setDateAdmission(Date dateAdmission) {
        _dateAdmission = dateAdmission;
    }

    @JSON
    @Override
    public String getSelfCertified() {
        if (_selfCertified == null) {
            return StringPool.BLANK;
        } else {
            return _selfCertified;
        }
    }

    @Override
    public void setSelfCertified(String selfCertified) {
        _selfCertified = selfCertified;
    }

    @JSON
    @Override
    public Date getInventoryRegistrationDate() {
        return _inventoryRegistrationDate;
    }

    @Override
    public void setInventoryRegistrationDate(Date inventoryRegistrationDate) {
        _inventoryRegistrationDate = inventoryRegistrationDate;
    }

    @JSON
    @Override
    public String getWhatProcessDischarged() {
        if (_whatProcessDischarged == null) {
            return StringPool.BLANK;
        } else {
            return _whatProcessDischarged;
        }
    }

    @Override
    public void setWhatProcessDischarged(String whatProcessDischarged) {
        _whatProcessDischarged = whatProcessDischarged;
    }

    @JSON
    @Override
    public String getEngineLiters() {
        if (_engineLiters == null) {
            return StringPool.BLANK;
        } else {
            return _engineLiters;
        }
    }

    @Override
    public void setEngineLiters(String engineLiters) {
        _engineLiters = engineLiters;
    }

    @JSON
    @Override
    public String getTransmission() {
        if (_transmission == null) {
            return StringPool.BLANK;
        } else {
            return _transmission;
        }
    }

    @Override
    public void setTransmission(String transmission) {
        _transmission = transmission;
    }

    @JSON
    @Override
    public String getLocation() {
        if (_location == null) {
            return StringPool.BLANK;
        } else {
            return _location;
        }
    }

    @Override
    public void setLocation(String location) {
        _location = location;
    }

    @JSON
    @Override
    public int getHp() {
        return _hp;
    }

    @Override
    public void setHp(int hp) {
        _hp = hp;
    }

    @JSON
    @Override
    public String getCarToConsignment() {
        if (_carToConsignment == null) {
            return StringPool.BLANK;
        } else {
            return _carToConsignment;
        }
    }

    @Override
    public void setCarToConsignment(String carToConsignment) {
        _carToConsignment = carToConsignment;
    }

    @JSON
    @Override
    public String getComments() {
        if (_comments == null) {
            return StringPool.BLANK;
        } else {
            return _comments;
        }
    }

    @Override
    public void setComments(String comments) {
        _comments = comments;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @JSON
    @Override
    public String getColor() {
        if (_color == null) {
            return StringPool.BLANK;
        } else {
            return _color;
        }
    }

    @Override
    public void setColor(String color) {
        _color = color;
    }

    @JSON
    @Override
    public String getDaysSpentInventory() {
        if (_daysSpentInventory == null) {
            return StringPool.BLANK;
        } else {
            return _daysSpentInventory;
        }
    }

    @Override
    public void setDaysSpentInventory(String daysSpentInventory) {
        _daysSpentInventory = daysSpentInventory;
    }

    @JSON
    @Override
    public double getSuggestedPricePurchase() {
        return _suggestedPricePurchase;
    }

    @Override
    public void setSuggestedPricePurchase(double suggestedPricePurchase) {
        _suggestedPricePurchase = suggestedPricePurchase;
    }

    @JSON
    @Override
    public double getSuggestedSalePrice() {
        return _suggestedSalePrice;
    }

    @Override
    public void setSuggestedSalePrice(double suggestedSalePrice) {
        _suggestedSalePrice = suggestedSalePrice;
    }

    @JSON
    @Override
    public int getVersionPricePurchaseSale() {
        return _versionPricePurchaseSale;
    }

    @Override
    public void setVersionPricePurchaseSale(int versionPricePurchaseSale) {
        _versionPricePurchaseSale = versionPricePurchaseSale;
    }

    @JSON
    @Override
    public String getStatusName() {
        if (_statusName == null) {
            return StringPool.BLANK;
        } else {
            return _statusName;
        }
    }

    @Override
    public void setStatusName(String statusName) {
        _statusName = statusName;
    }

    @JSON
    @Override
    public int getSourceSupplyId() {
        return _sourceSupplyId;
    }

    @Override
    public void setSourceSupplyId(int sourceSupplyId) {
        _sourceSupplyId = sourceSupplyId;
    }

    @JSON
    @Override
    public int getInventoryClasificationId() {
        return _inventoryClasificationId;
    }

    @Override
    public void setInventoryClasificationId(int inventoryClasificationId) {
        _inventoryClasificationId = inventoryClasificationId;
    }

    @JSON
    @Override
    public int getSaleId() {
        return _saleId;
    }

    @Override
    public void setSaleId(int saleId) {
        _saleId = saleId;
    }

    @JSON
    @Override
    public String getTradeInId() {
        if (_tradeInId == null) {
            return StringPool.BLANK;
        } else {
            return _tradeInId;
        }
    }

    @Override
    public void setTradeInId(String tradeInId) {
        _tradeInId = tradeInId;
    }

    @JSON
    @Override
    public int getEmployeeId() {
        return _employeeId;
    }

    @Override
    public void setEmployeeId(int employeeId) {
        _employeeId = employeeId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public EntityInventory toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityInventory) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityInventoryImpl entityInventoryImpl = new EntityInventoryImpl();

        entityInventoryImpl.setInventoryId(getInventoryId());
        entityInventoryImpl.setDealerId(getDealerId());
        entityInventoryImpl.setBusinessBrandName(getBusinessBrandName());
        entityInventoryImpl.setVersionId(getVersionId());
        entityInventoryImpl.setYearModel(getYearModel());
        entityInventoryImpl.setBrandId(getBrandId());
        entityInventoryImpl.setModelId(getModelId());
        entityInventoryImpl.setCarExchange(getCarExchange());
        entityInventoryImpl.setChasis(getChasis());
        entityInventoryImpl.setKilometer(getKilometer());
        entityInventoryImpl.setNumberDoors(getNumberDoors());
        entityInventoryImpl.setPurchasePrice(getPurchasePrice());
        entityInventoryImpl.setDamage(getDamage());
        entityInventoryImpl.setEstimatedSalePrice(getEstimatedSalePrice());
        entityInventoryImpl.setEstimatedGrossProfit(getEstimatedGrossProfit());
        entityInventoryImpl.setDateAdmission(getDateAdmission());
        entityInventoryImpl.setSelfCertified(getSelfCertified());
        entityInventoryImpl.setInventoryRegistrationDate(getInventoryRegistrationDate());
        entityInventoryImpl.setWhatProcessDischarged(getWhatProcessDischarged());
        entityInventoryImpl.setEngineLiters(getEngineLiters());
        entityInventoryImpl.setTransmission(getTransmission());
        entityInventoryImpl.setLocation(getLocation());
        entityInventoryImpl.setHp(getHp());
        entityInventoryImpl.setCarToConsignment(getCarToConsignment());
        entityInventoryImpl.setComments(getComments());
        entityInventoryImpl.setStatus(getStatus());
        entityInventoryImpl.setColor(getColor());
        entityInventoryImpl.setDaysSpentInventory(getDaysSpentInventory());
        entityInventoryImpl.setSuggestedPricePurchase(getSuggestedPricePurchase());
        entityInventoryImpl.setSuggestedSalePrice(getSuggestedSalePrice());
        entityInventoryImpl.setVersionPricePurchaseSale(getVersionPricePurchaseSale());
        entityInventoryImpl.setStatusName(getStatusName());
        entityInventoryImpl.setSourceSupplyId(getSourceSupplyId());
        entityInventoryImpl.setInventoryClasificationId(getInventoryClasificationId());
        entityInventoryImpl.setSaleId(getSaleId());
        entityInventoryImpl.setTradeInId(getTradeInId());
        entityInventoryImpl.setEmployeeId(getEmployeeId());

        entityInventoryImpl.resetOriginalValues();

        return entityInventoryImpl;
    }

    @Override
    public int compareTo(EntityInventory entityInventory) {
        EntityInventoryPK primaryKey = entityInventory.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityInventory)) {
            return false;
        }

        EntityInventory entityInventory = (EntityInventory) obj;

        EntityInventoryPK primaryKey = entityInventory.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        EntityInventoryModelImpl entityInventoryModelImpl = this;

        entityInventoryModelImpl._originalDealerId = entityInventoryModelImpl._dealerId;

        entityInventoryModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EntityInventory> toCacheModel() {
        EntityInventoryCacheModel entityInventoryCacheModel = new EntityInventoryCacheModel();

        entityInventoryCacheModel.inventoryId = getInventoryId();

        entityInventoryCacheModel.dealerId = getDealerId();

        String dealerId = entityInventoryCacheModel.dealerId;

        if ((dealerId != null) && (dealerId.length() == 0)) {
            entityInventoryCacheModel.dealerId = null;
        }

        entityInventoryCacheModel.businessBrandName = getBusinessBrandName();

        String businessBrandName = entityInventoryCacheModel.businessBrandName;

        if ((businessBrandName != null) && (businessBrandName.length() == 0)) {
            entityInventoryCacheModel.businessBrandName = null;
        }

        entityInventoryCacheModel.versionId = getVersionId();

        entityInventoryCacheModel.yearModel = getYearModel();

        entityInventoryCacheModel.brandId = getBrandId();

        entityInventoryCacheModel.modelId = getModelId();

        entityInventoryCacheModel.carExchange = getCarExchange();

        String carExchange = entityInventoryCacheModel.carExchange;

        if ((carExchange != null) && (carExchange.length() == 0)) {
            entityInventoryCacheModel.carExchange = null;
        }

        entityInventoryCacheModel.chasis = getChasis();

        String chasis = entityInventoryCacheModel.chasis;

        if ((chasis != null) && (chasis.length() == 0)) {
            entityInventoryCacheModel.chasis = null;
        }

        entityInventoryCacheModel.kilometer = getKilometer();

        entityInventoryCacheModel.numberDoors = getNumberDoors();

        entityInventoryCacheModel.purchasePrice = getPurchasePrice();

        entityInventoryCacheModel.damage = getDamage();

        entityInventoryCacheModel.estimatedSalePrice = getEstimatedSalePrice();

        entityInventoryCacheModel.estimatedGrossProfit = getEstimatedGrossProfit();

        Date dateAdmission = getDateAdmission();

        if (dateAdmission != null) {
            entityInventoryCacheModel.dateAdmission = dateAdmission.getTime();
        } else {
            entityInventoryCacheModel.dateAdmission = Long.MIN_VALUE;
        }

        entityInventoryCacheModel.selfCertified = getSelfCertified();

        String selfCertified = entityInventoryCacheModel.selfCertified;

        if ((selfCertified != null) && (selfCertified.length() == 0)) {
            entityInventoryCacheModel.selfCertified = null;
        }

        Date inventoryRegistrationDate = getInventoryRegistrationDate();

        if (inventoryRegistrationDate != null) {
            entityInventoryCacheModel.inventoryRegistrationDate = inventoryRegistrationDate.getTime();
        } else {
            entityInventoryCacheModel.inventoryRegistrationDate = Long.MIN_VALUE;
        }

        entityInventoryCacheModel.whatProcessDischarged = getWhatProcessDischarged();

        String whatProcessDischarged = entityInventoryCacheModel.whatProcessDischarged;

        if ((whatProcessDischarged != null) &&
                (whatProcessDischarged.length() == 0)) {
            entityInventoryCacheModel.whatProcessDischarged = null;
        }

        entityInventoryCacheModel.engineLiters = getEngineLiters();

        String engineLiters = entityInventoryCacheModel.engineLiters;

        if ((engineLiters != null) && (engineLiters.length() == 0)) {
            entityInventoryCacheModel.engineLiters = null;
        }

        entityInventoryCacheModel.transmission = getTransmission();

        String transmission = entityInventoryCacheModel.transmission;

        if ((transmission != null) && (transmission.length() == 0)) {
            entityInventoryCacheModel.transmission = null;
        }

        entityInventoryCacheModel.location = getLocation();

        String location = entityInventoryCacheModel.location;

        if ((location != null) && (location.length() == 0)) {
            entityInventoryCacheModel.location = null;
        }

        entityInventoryCacheModel.hp = getHp();

        entityInventoryCacheModel.carToConsignment = getCarToConsignment();

        String carToConsignment = entityInventoryCacheModel.carToConsignment;

        if ((carToConsignment != null) && (carToConsignment.length() == 0)) {
            entityInventoryCacheModel.carToConsignment = null;
        }

        entityInventoryCacheModel.comments = getComments();

        String comments = entityInventoryCacheModel.comments;

        if ((comments != null) && (comments.length() == 0)) {
            entityInventoryCacheModel.comments = null;
        }

        entityInventoryCacheModel.status = getStatus();

        String status = entityInventoryCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            entityInventoryCacheModel.status = null;
        }

        entityInventoryCacheModel.color = getColor();

        String color = entityInventoryCacheModel.color;

        if ((color != null) && (color.length() == 0)) {
            entityInventoryCacheModel.color = null;
        }

        entityInventoryCacheModel.daysSpentInventory = getDaysSpentInventory();

        String daysSpentInventory = entityInventoryCacheModel.daysSpentInventory;

        if ((daysSpentInventory != null) && (daysSpentInventory.length() == 0)) {
            entityInventoryCacheModel.daysSpentInventory = null;
        }

        entityInventoryCacheModel.suggestedPricePurchase = getSuggestedPricePurchase();

        entityInventoryCacheModel.suggestedSalePrice = getSuggestedSalePrice();

        entityInventoryCacheModel.versionPricePurchaseSale = getVersionPricePurchaseSale();

        entityInventoryCacheModel.statusName = getStatusName();

        String statusName = entityInventoryCacheModel.statusName;

        if ((statusName != null) && (statusName.length() == 0)) {
            entityInventoryCacheModel.statusName = null;
        }

        entityInventoryCacheModel.sourceSupplyId = getSourceSupplyId();

        entityInventoryCacheModel.inventoryClasificationId = getInventoryClasificationId();

        entityInventoryCacheModel.saleId = getSaleId();

        entityInventoryCacheModel.tradeInId = getTradeInId();

        String tradeInId = entityInventoryCacheModel.tradeInId;

        if ((tradeInId != null) && (tradeInId.length() == 0)) {
            entityInventoryCacheModel.tradeInId = null;
        }

        entityInventoryCacheModel.employeeId = getEmployeeId();

        return entityInventoryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(75);

        sb.append("{inventoryId=");
        sb.append(getInventoryId());
        sb.append(", dealerId=");
        sb.append(getDealerId());
        sb.append(", businessBrandName=");
        sb.append(getBusinessBrandName());
        sb.append(", versionId=");
        sb.append(getVersionId());
        sb.append(", yearModel=");
        sb.append(getYearModel());
        sb.append(", brandId=");
        sb.append(getBrandId());
        sb.append(", modelId=");
        sb.append(getModelId());
        sb.append(", carExchange=");
        sb.append(getCarExchange());
        sb.append(", chasis=");
        sb.append(getChasis());
        sb.append(", kilometer=");
        sb.append(getKilometer());
        sb.append(", numberDoors=");
        sb.append(getNumberDoors());
        sb.append(", purchasePrice=");
        sb.append(getPurchasePrice());
        sb.append(", damage=");
        sb.append(getDamage());
        sb.append(", estimatedSalePrice=");
        sb.append(getEstimatedSalePrice());
        sb.append(", estimatedGrossProfit=");
        sb.append(getEstimatedGrossProfit());
        sb.append(", dateAdmission=");
        sb.append(getDateAdmission());
        sb.append(", selfCertified=");
        sb.append(getSelfCertified());
        sb.append(", inventoryRegistrationDate=");
        sb.append(getInventoryRegistrationDate());
        sb.append(", whatProcessDischarged=");
        sb.append(getWhatProcessDischarged());
        sb.append(", engineLiters=");
        sb.append(getEngineLiters());
        sb.append(", transmission=");
        sb.append(getTransmission());
        sb.append(", location=");
        sb.append(getLocation());
        sb.append(", hp=");
        sb.append(getHp());
        sb.append(", carToConsignment=");
        sb.append(getCarToConsignment());
        sb.append(", comments=");
        sb.append(getComments());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", color=");
        sb.append(getColor());
        sb.append(", daysSpentInventory=");
        sb.append(getDaysSpentInventory());
        sb.append(", suggestedPricePurchase=");
        sb.append(getSuggestedPricePurchase());
        sb.append(", suggestedSalePrice=");
        sb.append(getSuggestedSalePrice());
        sb.append(", versionPricePurchaseSale=");
        sb.append(getVersionPricePurchaseSale());
        sb.append(", statusName=");
        sb.append(getStatusName());
        sb.append(", sourceSupplyId=");
        sb.append(getSourceSupplyId());
        sb.append(", inventoryClasificationId=");
        sb.append(getInventoryClasificationId());
        sb.append(", saleId=");
        sb.append(getSaleId());
        sb.append(", tradeInId=");
        sb.append(getTradeInId());
        sb.append(", employeeId=");
        sb.append(getEmployeeId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(115);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityInventory");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>inventoryId</column-name><column-value><![CDATA[");
        sb.append(getInventoryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dealerId</column-name><column-value><![CDATA[");
        sb.append(getDealerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessBrandName</column-name><column-value><![CDATA[");
        sb.append(getBusinessBrandName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>versionId</column-name><column-value><![CDATA[");
        sb.append(getVersionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>yearModel</column-name><column-value><![CDATA[");
        sb.append(getYearModel());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandId</column-name><column-value><![CDATA[");
        sb.append(getBrandId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelId</column-name><column-value><![CDATA[");
        sb.append(getModelId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>carExchange</column-name><column-value><![CDATA[");
        sb.append(getCarExchange());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>chasis</column-name><column-value><![CDATA[");
        sb.append(getChasis());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kilometer</column-name><column-value><![CDATA[");
        sb.append(getKilometer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>numberDoors</column-name><column-value><![CDATA[");
        sb.append(getNumberDoors());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>purchasePrice</column-name><column-value><![CDATA[");
        sb.append(getPurchasePrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>damage</column-name><column-value><![CDATA[");
        sb.append(getDamage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>estimatedSalePrice</column-name><column-value><![CDATA[");
        sb.append(getEstimatedSalePrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>estimatedGrossProfit</column-name><column-value><![CDATA[");
        sb.append(getEstimatedGrossProfit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dateAdmission</column-name><column-value><![CDATA[");
        sb.append(getDateAdmission());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>selfCertified</column-name><column-value><![CDATA[");
        sb.append(getSelfCertified());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inventoryRegistrationDate</column-name><column-value><![CDATA[");
        sb.append(getInventoryRegistrationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>whatProcessDischarged</column-name><column-value><![CDATA[");
        sb.append(getWhatProcessDischarged());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>engineLiters</column-name><column-value><![CDATA[");
        sb.append(getEngineLiters());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>transmission</column-name><column-value><![CDATA[");
        sb.append(getTransmission());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>location</column-name><column-value><![CDATA[");
        sb.append(getLocation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hp</column-name><column-value><![CDATA[");
        sb.append(getHp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>carToConsignment</column-name><column-value><![CDATA[");
        sb.append(getCarToConsignment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comments</column-name><column-value><![CDATA[");
        sb.append(getComments());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>color</column-name><column-value><![CDATA[");
        sb.append(getColor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>daysSpentInventory</column-name><column-value><![CDATA[");
        sb.append(getDaysSpentInventory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>suggestedPricePurchase</column-name><column-value><![CDATA[");
        sb.append(getSuggestedPricePurchase());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>suggestedSalePrice</column-name><column-value><![CDATA[");
        sb.append(getSuggestedSalePrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>versionPricePurchaseSale</column-name><column-value><![CDATA[");
        sb.append(getVersionPricePurchaseSale());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusName</column-name><column-value><![CDATA[");
        sb.append(getStatusName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sourceSupplyId</column-name><column-value><![CDATA[");
        sb.append(getSourceSupplyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inventoryClasificationId</column-name><column-value><![CDATA[");
        sb.append(getInventoryClasificationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>saleId</column-name><column-value><![CDATA[");
        sb.append(getSaleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tradeInId</column-name><column-value><![CDATA[");
        sb.append(getTradeInId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
