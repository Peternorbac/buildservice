package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityCustomer;
import com.consistent.ucwrt.model.EntityCustomerModel;
import com.consistent.ucwrt.model.EntityCustomerSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityCustomer service. Represents a row in the &quot;Customer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityCustomerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityCustomerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityCustomerImpl
 * @see com.consistent.ucwrt.model.EntityCustomer
 * @see com.consistent.ucwrt.model.EntityCustomerModel
 * @generated
 */
@JSON(strict = true)
public class EntityCustomerModelImpl extends BaseModelImpl<EntityCustomer>
    implements EntityCustomerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity customer model instance should use the {@link com.consistent.ucwrt.model.EntityCustomer} interface instead.
     */
    public static final String TABLE_NAME = "Customer";
    public static final Object[][] TABLE_COLUMNS = {
            { "clientId", Types.INTEGER },
            { "firstName", Types.VARCHAR },
            { "lastName", Types.VARCHAR },
            { "secondLastName", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "rfc", Types.VARCHAR },
            { "cellPhone", Types.VARCHAR },
            { "legalPersonality", Types.VARCHAR },
            { "personType", Types.VARCHAR },
            { "phone", Types.VARCHAR },
            { "registrationDate", Types.TIMESTAMP },
            { "comments", Types.VARCHAR },
            { "dealerId", Types.VARCHAR },
            { "businessBrandName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Customer (clientId INTEGER not null primary key,firstName VARCHAR(75) null,lastName VARCHAR(75) null,secondLastName VARCHAR(75) null,email VARCHAR(75) null,rfc VARCHAR(75) null,cellPhone VARCHAR(75) null,legalPersonality VARCHAR(75) null,personType VARCHAR(75) null,phone VARCHAR(75) null,registrationDate DATE null,comments VARCHAR(75) null,dealerId VARCHAR(75) null,businessBrandName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Customer";
    public static final String ORDER_BY_JPQL = " ORDER BY entityCustomer.clientId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Customer.clientId ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityCustomer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityCustomer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.consistent.ucwrt.model.EntityCustomer"),
            true);
    public static long DEALERID_COLUMN_BITMASK = 1L;
    public static long RFC_COLUMN_BITMASK = 2L;
    public static long CLIENTID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityCustomer"));
    private static ClassLoader _classLoader = EntityCustomer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityCustomer.class
        };
    private int _clientId;
    private String _firstName;
    private String _lastName;
    private String _secondLastName;
    private String _email;
    private String _rfc;
    private String _originalRfc;
    private String _cellPhone;
    private String _legalPersonality;
    private String _personType;
    private String _phone;
    private Date _registrationDate;
    private String _comments;
    private String _dealerId;
    private String _originalDealerId;
    private String _businessBrandName;
    private long _columnBitmask;
    private EntityCustomer _escapedModel;

    public EntityCustomerModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityCustomer toModel(EntityCustomerSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityCustomer model = new EntityCustomerImpl();

        model.setClientId(soapModel.getClientId());
        model.setFirstName(soapModel.getFirstName());
        model.setLastName(soapModel.getLastName());
        model.setSecondLastName(soapModel.getSecondLastName());
        model.setEmail(soapModel.getEmail());
        model.setRfc(soapModel.getRfc());
        model.setCellPhone(soapModel.getCellPhone());
        model.setLegalPersonality(soapModel.getLegalPersonality());
        model.setPersonType(soapModel.getPersonType());
        model.setPhone(soapModel.getPhone());
        model.setRegistrationDate(soapModel.getRegistrationDate());
        model.setComments(soapModel.getComments());
        model.setDealerId(soapModel.getDealerId());
        model.setBusinessBrandName(soapModel.getBusinessBrandName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityCustomer> toModels(EntityCustomerSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityCustomer> models = new ArrayList<EntityCustomer>(soapModels.length);

        for (EntityCustomerSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _clientId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setClientId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _clientId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EntityCustomer.class;
    }

    @Override
    public String getModelClassName() {
        return EntityCustomer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("clientId", getClientId());
        attributes.put("firstName", getFirstName());
        attributes.put("lastName", getLastName());
        attributes.put("secondLastName", getSecondLastName());
        attributes.put("email", getEmail());
        attributes.put("rfc", getRfc());
        attributes.put("cellPhone", getCellPhone());
        attributes.put("legalPersonality", getLegalPersonality());
        attributes.put("personType", getPersonType());
        attributes.put("phone", getPhone());
        attributes.put("registrationDate", getRegistrationDate());
        attributes.put("comments", getComments());
        attributes.put("dealerId", getDealerId());
        attributes.put("businessBrandName", getBusinessBrandName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer clientId = (Integer) attributes.get("clientId");

        if (clientId != null) {
            setClientId(clientId);
        }

        String firstName = (String) attributes.get("firstName");

        if (firstName != null) {
            setFirstName(firstName);
        }

        String lastName = (String) attributes.get("lastName");

        if (lastName != null) {
            setLastName(lastName);
        }

        String secondLastName = (String) attributes.get("secondLastName");

        if (secondLastName != null) {
            setSecondLastName(secondLastName);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String rfc = (String) attributes.get("rfc");

        if (rfc != null) {
            setRfc(rfc);
        }

        String cellPhone = (String) attributes.get("cellPhone");

        if (cellPhone != null) {
            setCellPhone(cellPhone);
        }

        String legalPersonality = (String) attributes.get("legalPersonality");

        if (legalPersonality != null) {
            setLegalPersonality(legalPersonality);
        }

        String personType = (String) attributes.get("personType");

        if (personType != null) {
            setPersonType(personType);
        }

        String phone = (String) attributes.get("phone");

        if (phone != null) {
            setPhone(phone);
        }

        Date registrationDate = (Date) attributes.get("registrationDate");

        if (registrationDate != null) {
            setRegistrationDate(registrationDate);
        }

        String comments = (String) attributes.get("comments");

        if (comments != null) {
            setComments(comments);
        }

        String dealerId = (String) attributes.get("dealerId");

        if (dealerId != null) {
            setDealerId(dealerId);
        }

        String businessBrandName = (String) attributes.get("businessBrandName");

        if (businessBrandName != null) {
            setBusinessBrandName(businessBrandName);
        }
    }

    @JSON
    @Override
    public int getClientId() {
        return _clientId;
    }

    @Override
    public void setClientId(int clientId) {
        _clientId = clientId;
    }

    @JSON
    @Override
    public String getFirstName() {
        if (_firstName == null) {
            return StringPool.BLANK;
        } else {
            return _firstName;
        }
    }

    @Override
    public void setFirstName(String firstName) {
        _firstName = firstName;
    }

    @JSON
    @Override
    public String getLastName() {
        if (_lastName == null) {
            return StringPool.BLANK;
        } else {
            return _lastName;
        }
    }

    @Override
    public void setLastName(String lastName) {
        _lastName = lastName;
    }

    @JSON
    @Override
    public String getSecondLastName() {
        if (_secondLastName == null) {
            return StringPool.BLANK;
        } else {
            return _secondLastName;
        }
    }

    @Override
    public void setSecondLastName(String secondLastName) {
        _secondLastName = secondLastName;
    }

    @JSON
    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _email = email;
    }

    @JSON
    @Override
    public String getRfc() {
        if (_rfc == null) {
            return StringPool.BLANK;
        } else {
            return _rfc;
        }
    }

    @Override
    public void setRfc(String rfc) {
        _columnBitmask |= RFC_COLUMN_BITMASK;

        if (_originalRfc == null) {
            _originalRfc = _rfc;
        }

        _rfc = rfc;
    }

    public String getOriginalRfc() {
        return GetterUtil.getString(_originalRfc);
    }

    @JSON
    @Override
    public String getCellPhone() {
        if (_cellPhone == null) {
            return StringPool.BLANK;
        } else {
            return _cellPhone;
        }
    }

    @Override
    public void setCellPhone(String cellPhone) {
        _cellPhone = cellPhone;
    }

    @JSON
    @Override
    public String getLegalPersonality() {
        if (_legalPersonality == null) {
            return StringPool.BLANK;
        } else {
            return _legalPersonality;
        }
    }

    @Override
    public void setLegalPersonality(String legalPersonality) {
        _legalPersonality = legalPersonality;
    }

    @JSON
    @Override
    public String getPersonType() {
        if (_personType == null) {
            return StringPool.BLANK;
        } else {
            return _personType;
        }
    }

    @Override
    public void setPersonType(String personType) {
        _personType = personType;
    }

    @JSON
    @Override
    public String getPhone() {
        if (_phone == null) {
            return StringPool.BLANK;
        } else {
            return _phone;
        }
    }

    @Override
    public void setPhone(String phone) {
        _phone = phone;
    }

    @JSON
    @Override
    public Date getRegistrationDate() {
        return _registrationDate;
    }

    @Override
    public void setRegistrationDate(Date registrationDate) {
        _registrationDate = registrationDate;
    }

    @JSON
    @Override
    public String getComments() {
        if (_comments == null) {
            return StringPool.BLANK;
        } else {
            return _comments;
        }
    }

    @Override
    public void setComments(String comments) {
        _comments = comments;
    }

    @JSON
    @Override
    public String getDealerId() {
        if (_dealerId == null) {
            return StringPool.BLANK;
        } else {
            return _dealerId;
        }
    }

    @Override
    public void setDealerId(String dealerId) {
        _columnBitmask |= DEALERID_COLUMN_BITMASK;

        if (_originalDealerId == null) {
            _originalDealerId = _dealerId;
        }

        _dealerId = dealerId;
    }

    public String getOriginalDealerId() {
        return GetterUtil.getString(_originalDealerId);
    }

    @JSON
    @Override
    public String getBusinessBrandName() {
        if (_businessBrandName == null) {
            return StringPool.BLANK;
        } else {
            return _businessBrandName;
        }
    }

    @Override
    public void setBusinessBrandName(String businessBrandName) {
        _businessBrandName = businessBrandName;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public EntityCustomer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityCustomer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityCustomerImpl entityCustomerImpl = new EntityCustomerImpl();

        entityCustomerImpl.setClientId(getClientId());
        entityCustomerImpl.setFirstName(getFirstName());
        entityCustomerImpl.setLastName(getLastName());
        entityCustomerImpl.setSecondLastName(getSecondLastName());
        entityCustomerImpl.setEmail(getEmail());
        entityCustomerImpl.setRfc(getRfc());
        entityCustomerImpl.setCellPhone(getCellPhone());
        entityCustomerImpl.setLegalPersonality(getLegalPersonality());
        entityCustomerImpl.setPersonType(getPersonType());
        entityCustomerImpl.setPhone(getPhone());
        entityCustomerImpl.setRegistrationDate(getRegistrationDate());
        entityCustomerImpl.setComments(getComments());
        entityCustomerImpl.setDealerId(getDealerId());
        entityCustomerImpl.setBusinessBrandName(getBusinessBrandName());

        entityCustomerImpl.resetOriginalValues();

        return entityCustomerImpl;
    }

    @Override
    public int compareTo(EntityCustomer entityCustomer) {
        int primaryKey = entityCustomer.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityCustomer)) {
            return false;
        }

        EntityCustomer entityCustomer = (EntityCustomer) obj;

        int primaryKey = entityCustomer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EntityCustomerModelImpl entityCustomerModelImpl = this;

        entityCustomerModelImpl._originalRfc = entityCustomerModelImpl._rfc;

        entityCustomerModelImpl._originalDealerId = entityCustomerModelImpl._dealerId;

        entityCustomerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EntityCustomer> toCacheModel() {
        EntityCustomerCacheModel entityCustomerCacheModel = new EntityCustomerCacheModel();

        entityCustomerCacheModel.clientId = getClientId();

        entityCustomerCacheModel.firstName = getFirstName();

        String firstName = entityCustomerCacheModel.firstName;

        if ((firstName != null) && (firstName.length() == 0)) {
            entityCustomerCacheModel.firstName = null;
        }

        entityCustomerCacheModel.lastName = getLastName();

        String lastName = entityCustomerCacheModel.lastName;

        if ((lastName != null) && (lastName.length() == 0)) {
            entityCustomerCacheModel.lastName = null;
        }

        entityCustomerCacheModel.secondLastName = getSecondLastName();

        String secondLastName = entityCustomerCacheModel.secondLastName;

        if ((secondLastName != null) && (secondLastName.length() == 0)) {
            entityCustomerCacheModel.secondLastName = null;
        }

        entityCustomerCacheModel.email = getEmail();

        String email = entityCustomerCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            entityCustomerCacheModel.email = null;
        }

        entityCustomerCacheModel.rfc = getRfc();

        String rfc = entityCustomerCacheModel.rfc;

        if ((rfc != null) && (rfc.length() == 0)) {
            entityCustomerCacheModel.rfc = null;
        }

        entityCustomerCacheModel.cellPhone = getCellPhone();

        String cellPhone = entityCustomerCacheModel.cellPhone;

        if ((cellPhone != null) && (cellPhone.length() == 0)) {
            entityCustomerCacheModel.cellPhone = null;
        }

        entityCustomerCacheModel.legalPersonality = getLegalPersonality();

        String legalPersonality = entityCustomerCacheModel.legalPersonality;

        if ((legalPersonality != null) && (legalPersonality.length() == 0)) {
            entityCustomerCacheModel.legalPersonality = null;
        }

        entityCustomerCacheModel.personType = getPersonType();

        String personType = entityCustomerCacheModel.personType;

        if ((personType != null) && (personType.length() == 0)) {
            entityCustomerCacheModel.personType = null;
        }

        entityCustomerCacheModel.phone = getPhone();

        String phone = entityCustomerCacheModel.phone;

        if ((phone != null) && (phone.length() == 0)) {
            entityCustomerCacheModel.phone = null;
        }

        Date registrationDate = getRegistrationDate();

        if (registrationDate != null) {
            entityCustomerCacheModel.registrationDate = registrationDate.getTime();
        } else {
            entityCustomerCacheModel.registrationDate = Long.MIN_VALUE;
        }

        entityCustomerCacheModel.comments = getComments();

        String comments = entityCustomerCacheModel.comments;

        if ((comments != null) && (comments.length() == 0)) {
            entityCustomerCacheModel.comments = null;
        }

        entityCustomerCacheModel.dealerId = getDealerId();

        String dealerId = entityCustomerCacheModel.dealerId;

        if ((dealerId != null) && (dealerId.length() == 0)) {
            entityCustomerCacheModel.dealerId = null;
        }

        entityCustomerCacheModel.businessBrandName = getBusinessBrandName();

        String businessBrandName = entityCustomerCacheModel.businessBrandName;

        if ((businessBrandName != null) && (businessBrandName.length() == 0)) {
            entityCustomerCacheModel.businessBrandName = null;
        }

        return entityCustomerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(29);

        sb.append("{clientId=");
        sb.append(getClientId());
        sb.append(", firstName=");
        sb.append(getFirstName());
        sb.append(", lastName=");
        sb.append(getLastName());
        sb.append(", secondLastName=");
        sb.append(getSecondLastName());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", rfc=");
        sb.append(getRfc());
        sb.append(", cellPhone=");
        sb.append(getCellPhone());
        sb.append(", legalPersonality=");
        sb.append(getLegalPersonality());
        sb.append(", personType=");
        sb.append(getPersonType());
        sb.append(", phone=");
        sb.append(getPhone());
        sb.append(", registrationDate=");
        sb.append(getRegistrationDate());
        sb.append(", comments=");
        sb.append(getComments());
        sb.append(", dealerId=");
        sb.append(getDealerId());
        sb.append(", businessBrandName=");
        sb.append(getBusinessBrandName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(46);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityCustomer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>clientId</column-name><column-value><![CDATA[");
        sb.append(getClientId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstName</column-name><column-value><![CDATA[");
        sb.append(getFirstName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastName</column-name><column-value><![CDATA[");
        sb.append(getLastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>secondLastName</column-name><column-value><![CDATA[");
        sb.append(getSecondLastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rfc</column-name><column-value><![CDATA[");
        sb.append(getRfc());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cellPhone</column-name><column-value><![CDATA[");
        sb.append(getCellPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>legalPersonality</column-name><column-value><![CDATA[");
        sb.append(getLegalPersonality());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>personType</column-name><column-value><![CDATA[");
        sb.append(getPersonType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>phone</column-name><column-value><![CDATA[");
        sb.append(getPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>registrationDate</column-name><column-value><![CDATA[");
        sb.append(getRegistrationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comments</column-name><column-value><![CDATA[");
        sb.append(getComments());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dealerId</column-name><column-value><![CDATA[");
        sb.append(getDealerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessBrandName</column-name><column-value><![CDATA[");
        sb.append(getBusinessBrandName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
