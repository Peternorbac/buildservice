package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityStatus;
import com.consistent.ucwrt.model.EntityStatusModel;
import com.consistent.ucwrt.model.EntityStatusSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityStatus service. Represents a row in the &quot;Status&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityStatusImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityStatusImpl
 * @see com.consistent.ucwrt.model.EntityStatus
 * @see com.consistent.ucwrt.model.EntityStatusModel
 * @generated
 */
@JSON(strict = true)
public class EntityStatusModelImpl extends BaseModelImpl<EntityStatus>
    implements EntityStatusModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity status model instance should use the {@link com.consistent.ucwrt.model.EntityStatus} interface instead.
     */
    public static final String TABLE_NAME = "Status";
    public static final Object[][] TABLE_COLUMNS = {
            { "statusName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Status (statusName VARCHAR(75) not null primary key)";
    public static final String TABLE_SQL_DROP = "drop table Status";
    public static final String ORDER_BY_JPQL = " ORDER BY entityStatus.statusName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Status.statusName ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityStatus"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityStatus"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityStatus"));
    private static ClassLoader _classLoader = EntityStatus.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityStatus.class
        };
    private String _statusName;
    private EntityStatus _escapedModel;

    public EntityStatusModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityStatus toModel(EntityStatusSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityStatus model = new EntityStatusImpl();

        model.setStatusName(soapModel.getStatusName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityStatus> toModels(EntityStatusSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityStatus> models = new ArrayList<EntityStatus>(soapModels.length);

        for (EntityStatusSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _statusName;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setStatusName(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _statusName;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return EntityStatus.class;
    }

    @Override
    public String getModelClassName() {
        return EntityStatus.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("statusName", getStatusName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String statusName = (String) attributes.get("statusName");

        if (statusName != null) {
            setStatusName(statusName);
        }
    }

    @JSON
    @Override
    public String getStatusName() {
        if (_statusName == null) {
            return StringPool.BLANK;
        } else {
            return _statusName;
        }
    }

    @Override
    public void setStatusName(String statusName) {
        _statusName = statusName;
    }

    @Override
    public EntityStatus toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityStatus) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityStatusImpl entityStatusImpl = new EntityStatusImpl();

        entityStatusImpl.setStatusName(getStatusName());

        entityStatusImpl.resetOriginalValues();

        return entityStatusImpl;
    }

    @Override
    public int compareTo(EntityStatus entityStatus) {
        String primaryKey = entityStatus.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityStatus)) {
            return false;
        }

        EntityStatus entityStatus = (EntityStatus) obj;

        String primaryKey = entityStatus.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<EntityStatus> toCacheModel() {
        EntityStatusCacheModel entityStatusCacheModel = new EntityStatusCacheModel();

        entityStatusCacheModel.statusName = getStatusName();

        String statusName = entityStatusCacheModel.statusName;

        if ((statusName != null) && (statusName.length() == 0)) {
            entityStatusCacheModel.statusName = null;
        }

        return entityStatusCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(3);

        sb.append("{statusName=");
        sb.append(getStatusName());

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(7);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityStatus");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>statusName</column-name><column-value><![CDATA[");
        sb.append(getStatusName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
