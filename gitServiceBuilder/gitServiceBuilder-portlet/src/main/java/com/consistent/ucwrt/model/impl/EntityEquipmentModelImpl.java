package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityEquipment;
import com.consistent.ucwrt.model.EntityEquipmentModel;
import com.consistent.ucwrt.model.EntityEquipmentSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityEquipment service. Represents a row in the &quot;Equipment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityEquipmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityEquipmentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityEquipmentImpl
 * @see com.consistent.ucwrt.model.EntityEquipment
 * @see com.consistent.ucwrt.model.EntityEquipmentModel
 * @generated
 */
@JSON(strict = true)
public class EntityEquipmentModelImpl extends BaseModelImpl<EntityEquipment>
    implements EntityEquipmentModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity equipment model instance should use the {@link com.consistent.ucwrt.model.EntityEquipment} interface instead.
     */
    public static final String TABLE_NAME = "Equipment";
    public static final Object[][] TABLE_COLUMNS = {
            { "equipmentId", Types.INTEGER },
            { "equipmentDescription", Types.VARCHAR },
            { "equipmentPurchasePrice", Types.DOUBLE },
            { "equipmentPurchasePriceDll", Types.DOUBLE },
            { "equipmentSalePrice", Types.DOUBLE },
            { "status", Types.VARCHAR },
            { "modelId", Types.INTEGER },
            { "brandId", Types.INTEGER },
            { "yearModel", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table Equipment (equipmentId INTEGER not null primary key,equipmentDescription VARCHAR(75) null,equipmentPurchasePrice DOUBLE,equipmentPurchasePriceDll DOUBLE,equipmentSalePrice DOUBLE,status VARCHAR(75) null,modelId INTEGER,brandId INTEGER,yearModel INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table Equipment";
    public static final String ORDER_BY_JPQL = " ORDER BY entityEquipment.equipmentId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Equipment.equipmentId ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityEquipment"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityEquipment"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.consistent.ucwrt.model.EntityEquipment"),
            true);
    public static long EQUIPMENTID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityEquipment"));
    private static ClassLoader _classLoader = EntityEquipment.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityEquipment.class
        };
    private int _equipmentId;
    private int _originalEquipmentId;
    private boolean _setOriginalEquipmentId;
    private String _equipmentDescription;
    private double _equipmentPurchasePrice;
    private double _equipmentPurchasePriceDll;
    private double _equipmentSalePrice;
    private String _status;
    private int _modelId;
    private int _brandId;
    private int _yearModel;
    private long _columnBitmask;
    private EntityEquipment _escapedModel;

    public EntityEquipmentModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityEquipment toModel(EntityEquipmentSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityEquipment model = new EntityEquipmentImpl();

        model.setEquipmentId(soapModel.getEquipmentId());
        model.setEquipmentDescription(soapModel.getEquipmentDescription());
        model.setEquipmentPurchasePrice(soapModel.getEquipmentPurchasePrice());
        model.setEquipmentPurchasePriceDll(soapModel.getEquipmentPurchasePriceDll());
        model.setEquipmentSalePrice(soapModel.getEquipmentSalePrice());
        model.setStatus(soapModel.getStatus());
        model.setModelId(soapModel.getModelId());
        model.setBrandId(soapModel.getBrandId());
        model.setYearModel(soapModel.getYearModel());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityEquipment> toModels(
        EntityEquipmentSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityEquipment> models = new ArrayList<EntityEquipment>(soapModels.length);

        for (EntityEquipmentSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _equipmentId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setEquipmentId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _equipmentId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EntityEquipment.class;
    }

    @Override
    public String getModelClassName() {
        return EntityEquipment.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("equipmentId", getEquipmentId());
        attributes.put("equipmentDescription", getEquipmentDescription());
        attributes.put("equipmentPurchasePrice", getEquipmentPurchasePrice());
        attributes.put("equipmentPurchasePriceDll",
            getEquipmentPurchasePriceDll());
        attributes.put("equipmentSalePrice", getEquipmentSalePrice());
        attributes.put("status", getStatus());
        attributes.put("modelId", getModelId());
        attributes.put("brandId", getBrandId());
        attributes.put("yearModel", getYearModel());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer equipmentId = (Integer) attributes.get("equipmentId");

        if (equipmentId != null) {
            setEquipmentId(equipmentId);
        }

        String equipmentDescription = (String) attributes.get(
                "equipmentDescription");

        if (equipmentDescription != null) {
            setEquipmentDescription(equipmentDescription);
        }

        Double equipmentPurchasePrice = (Double) attributes.get(
                "equipmentPurchasePrice");

        if (equipmentPurchasePrice != null) {
            setEquipmentPurchasePrice(equipmentPurchasePrice);
        }

        Double equipmentPurchasePriceDll = (Double) attributes.get(
                "equipmentPurchasePriceDll");

        if (equipmentPurchasePriceDll != null) {
            setEquipmentPurchasePriceDll(equipmentPurchasePriceDll);
        }

        Double equipmentSalePrice = (Double) attributes.get(
                "equipmentSalePrice");

        if (equipmentSalePrice != null) {
            setEquipmentSalePrice(equipmentSalePrice);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Integer modelId = (Integer) attributes.get("modelId");

        if (modelId != null) {
            setModelId(modelId);
        }

        Integer brandId = (Integer) attributes.get("brandId");

        if (brandId != null) {
            setBrandId(brandId);
        }

        Integer yearModel = (Integer) attributes.get("yearModel");

        if (yearModel != null) {
            setYearModel(yearModel);
        }
    }

    @JSON
    @Override
    public int getEquipmentId() {
        return _equipmentId;
    }

    @Override
    public void setEquipmentId(int equipmentId) {
        _columnBitmask |= EQUIPMENTID_COLUMN_BITMASK;

        if (!_setOriginalEquipmentId) {
            _setOriginalEquipmentId = true;

            _originalEquipmentId = _equipmentId;
        }

        _equipmentId = equipmentId;
    }

    public int getOriginalEquipmentId() {
        return _originalEquipmentId;
    }

    @JSON
    @Override
    public String getEquipmentDescription() {
        if (_equipmentDescription == null) {
            return StringPool.BLANK;
        } else {
            return _equipmentDescription;
        }
    }

    @Override
    public void setEquipmentDescription(String equipmentDescription) {
        _equipmentDescription = equipmentDescription;
    }

    @JSON
    @Override
    public double getEquipmentPurchasePrice() {
        return _equipmentPurchasePrice;
    }

    @Override
    public void setEquipmentPurchasePrice(double equipmentPurchasePrice) {
        _equipmentPurchasePrice = equipmentPurchasePrice;
    }

    @JSON
    @Override
    public double getEquipmentPurchasePriceDll() {
        return _equipmentPurchasePriceDll;
    }

    @Override
    public void setEquipmentPurchasePriceDll(double equipmentPurchasePriceDll) {
        _equipmentPurchasePriceDll = equipmentPurchasePriceDll;
    }

    @JSON
    @Override
    public double getEquipmentSalePrice() {
        return _equipmentSalePrice;
    }

    @Override
    public void setEquipmentSalePrice(double equipmentSalePrice) {
        _equipmentSalePrice = equipmentSalePrice;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @JSON
    @Override
    public int getModelId() {
        return _modelId;
    }

    @Override
    public void setModelId(int modelId) {
        _modelId = modelId;
    }

    @JSON
    @Override
    public int getBrandId() {
        return _brandId;
    }

    @Override
    public void setBrandId(int brandId) {
        _brandId = brandId;
    }

    @JSON
    @Override
    public int getYearModel() {
        return _yearModel;
    }

    @Override
    public void setYearModel(int yearModel) {
        _yearModel = yearModel;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public EntityEquipment toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityEquipment) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityEquipmentImpl entityEquipmentImpl = new EntityEquipmentImpl();

        entityEquipmentImpl.setEquipmentId(getEquipmentId());
        entityEquipmentImpl.setEquipmentDescription(getEquipmentDescription());
        entityEquipmentImpl.setEquipmentPurchasePrice(getEquipmentPurchasePrice());
        entityEquipmentImpl.setEquipmentPurchasePriceDll(getEquipmentPurchasePriceDll());
        entityEquipmentImpl.setEquipmentSalePrice(getEquipmentSalePrice());
        entityEquipmentImpl.setStatus(getStatus());
        entityEquipmentImpl.setModelId(getModelId());
        entityEquipmentImpl.setBrandId(getBrandId());
        entityEquipmentImpl.setYearModel(getYearModel());

        entityEquipmentImpl.resetOriginalValues();

        return entityEquipmentImpl;
    }

    @Override
    public int compareTo(EntityEquipment entityEquipment) {
        int primaryKey = entityEquipment.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityEquipment)) {
            return false;
        }

        EntityEquipment entityEquipment = (EntityEquipment) obj;

        int primaryKey = entityEquipment.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EntityEquipmentModelImpl entityEquipmentModelImpl = this;

        entityEquipmentModelImpl._originalEquipmentId = entityEquipmentModelImpl._equipmentId;

        entityEquipmentModelImpl._setOriginalEquipmentId = false;

        entityEquipmentModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EntityEquipment> toCacheModel() {
        EntityEquipmentCacheModel entityEquipmentCacheModel = new EntityEquipmentCacheModel();

        entityEquipmentCacheModel.equipmentId = getEquipmentId();

        entityEquipmentCacheModel.equipmentDescription = getEquipmentDescription();

        String equipmentDescription = entityEquipmentCacheModel.equipmentDescription;

        if ((equipmentDescription != null) &&
                (equipmentDescription.length() == 0)) {
            entityEquipmentCacheModel.equipmentDescription = null;
        }

        entityEquipmentCacheModel.equipmentPurchasePrice = getEquipmentPurchasePrice();

        entityEquipmentCacheModel.equipmentPurchasePriceDll = getEquipmentPurchasePriceDll();

        entityEquipmentCacheModel.equipmentSalePrice = getEquipmentSalePrice();

        entityEquipmentCacheModel.status = getStatus();

        String status = entityEquipmentCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            entityEquipmentCacheModel.status = null;
        }

        entityEquipmentCacheModel.modelId = getModelId();

        entityEquipmentCacheModel.brandId = getBrandId();

        entityEquipmentCacheModel.yearModel = getYearModel();

        return entityEquipmentCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{equipmentId=");
        sb.append(getEquipmentId());
        sb.append(", equipmentDescription=");
        sb.append(getEquipmentDescription());
        sb.append(", equipmentPurchasePrice=");
        sb.append(getEquipmentPurchasePrice());
        sb.append(", equipmentPurchasePriceDll=");
        sb.append(getEquipmentPurchasePriceDll());
        sb.append(", equipmentSalePrice=");
        sb.append(getEquipmentSalePrice());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", modelId=");
        sb.append(getModelId());
        sb.append(", brandId=");
        sb.append(getBrandId());
        sb.append(", yearModel=");
        sb.append(getYearModel());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityEquipment");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>equipmentId</column-name><column-value><![CDATA[");
        sb.append(getEquipmentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>equipmentDescription</column-name><column-value><![CDATA[");
        sb.append(getEquipmentDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>equipmentPurchasePrice</column-name><column-value><![CDATA[");
        sb.append(getEquipmentPurchasePrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>equipmentPurchasePriceDll</column-name><column-value><![CDATA[");
        sb.append(getEquipmentPurchasePriceDll());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>equipmentSalePrice</column-name><column-value><![CDATA[");
        sb.append(getEquipmentSalePrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modelId</column-name><column-value><![CDATA[");
        sb.append(getModelId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brandId</column-name><column-value><![CDATA[");
        sb.append(getBrandId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>yearModel</column-name><column-value><![CDATA[");
        sb.append(getYearModel());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
