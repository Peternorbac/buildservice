package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityYearModelClass;
import com.consistent.ucwrt.model.EntityYearModelClassModel;
import com.consistent.ucwrt.model.EntityYearModelClassSoap;
import com.consistent.ucwrt.service.persistence.EntityYearModelClassPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityYearModelClass service. Represents a row in the &quot;YearModelClass&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityYearModelClassModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityYearModelClassImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityYearModelClassImpl
 * @see com.consistent.ucwrt.model.EntityYearModelClass
 * @see com.consistent.ucwrt.model.EntityYearModelClassModel
 * @generated
 */
@JSON(strict = true)
public class EntityYearModelClassModelImpl extends BaseModelImpl<EntityYearModelClass>
    implements EntityYearModelClassModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity year model class model instance should use the {@link com.consistent.ucwrt.model.EntityYearModelClass} interface instead.
     */
    public static final String TABLE_NAME = "YearModelClass";
    public static final Object[][] TABLE_COLUMNS = {
            { "classId", Types.INTEGER },
            { "yearModel", Types.INTEGER },
            { "startKilometer", Types.INTEGER },
            { "finishKilometers", Types.INTEGER },
            { "price", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table YearModelClass (classId INTEGER not null,yearModel INTEGER not null,startKilometer INTEGER not null,finishKilometers INTEGER not null,price DOUBLE,primary key (classId, yearModel, startKilometer, finishKilometers))";
    public static final String TABLE_SQL_DROP = "drop table YearModelClass";
    public static final String ORDER_BY_JPQL = " ORDER BY entityYearModelClass.id.classId ASC, entityYearModelClass.id.yearModel ASC, entityYearModelClass.id.startKilometer ASC, entityYearModelClass.id.finishKilometers ASC";
    public static final String ORDER_BY_SQL = " ORDER BY YearModelClass.classId ASC, YearModelClass.yearModel ASC, YearModelClass.startKilometer ASC, YearModelClass.finishKilometers ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityYearModelClass"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityYearModelClass"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityYearModelClass"));
    private static ClassLoader _classLoader = EntityYearModelClass.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityYearModelClass.class
        };
    private int _classId;
    private int _yearModel;
    private int _startKilometer;
    private int _finishKilometers;
    private double _price;
    private EntityYearModelClass _escapedModel;

    public EntityYearModelClassModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityYearModelClass toModel(
        EntityYearModelClassSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityYearModelClass model = new EntityYearModelClassImpl();

        model.setClassId(soapModel.getClassId());
        model.setYearModel(soapModel.getYearModel());
        model.setStartKilometer(soapModel.getStartKilometer());
        model.setFinishKilometers(soapModel.getFinishKilometers());
        model.setPrice(soapModel.getPrice());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityYearModelClass> toModels(
        EntityYearModelClassSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityYearModelClass> models = new ArrayList<EntityYearModelClass>(soapModels.length);

        for (EntityYearModelClassSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public EntityYearModelClassPK getPrimaryKey() {
        return new EntityYearModelClassPK(_classId, _yearModel,
            _startKilometer, _finishKilometers);
    }

    @Override
    public void setPrimaryKey(EntityYearModelClassPK primaryKey) {
        setClassId(primaryKey.classId);
        setYearModel(primaryKey.yearModel);
        setStartKilometer(primaryKey.startKilometer);
        setFinishKilometers(primaryKey.finishKilometers);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new EntityYearModelClassPK(_classId, _yearModel,
            _startKilometer, _finishKilometers);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((EntityYearModelClassPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return EntityYearModelClass.class;
    }

    @Override
    public String getModelClassName() {
        return EntityYearModelClass.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("classId", getClassId());
        attributes.put("yearModel", getYearModel());
        attributes.put("startKilometer", getStartKilometer());
        attributes.put("finishKilometers", getFinishKilometers());
        attributes.put("price", getPrice());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer classId = (Integer) attributes.get("classId");

        if (classId != null) {
            setClassId(classId);
        }

        Integer yearModel = (Integer) attributes.get("yearModel");

        if (yearModel != null) {
            setYearModel(yearModel);
        }

        Integer startKilometer = (Integer) attributes.get("startKilometer");

        if (startKilometer != null) {
            setStartKilometer(startKilometer);
        }

        Integer finishKilometers = (Integer) attributes.get("finishKilometers");

        if (finishKilometers != null) {
            setFinishKilometers(finishKilometers);
        }

        Double price = (Double) attributes.get("price");

        if (price != null) {
            setPrice(price);
        }
    }

    @JSON
    @Override
    public int getClassId() {
        return _classId;
    }

    @Override
    public void setClassId(int classId) {
        _classId = classId;
    }

    @JSON
    @Override
    public int getYearModel() {
        return _yearModel;
    }

    @Override
    public void setYearModel(int yearModel) {
        _yearModel = yearModel;
    }

    @JSON
    @Override
    public int getStartKilometer() {
        return _startKilometer;
    }

    @Override
    public void setStartKilometer(int startKilometer) {
        _startKilometer = startKilometer;
    }

    @JSON
    @Override
    public int getFinishKilometers() {
        return _finishKilometers;
    }

    @Override
    public void setFinishKilometers(int finishKilometers) {
        _finishKilometers = finishKilometers;
    }

    @JSON
    @Override
    public double getPrice() {
        return _price;
    }

    @Override
    public void setPrice(double price) {
        _price = price;
    }

    @Override
    public EntityYearModelClass toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityYearModelClass) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityYearModelClassImpl entityYearModelClassImpl = new EntityYearModelClassImpl();

        entityYearModelClassImpl.setClassId(getClassId());
        entityYearModelClassImpl.setYearModel(getYearModel());
        entityYearModelClassImpl.setStartKilometer(getStartKilometer());
        entityYearModelClassImpl.setFinishKilometers(getFinishKilometers());
        entityYearModelClassImpl.setPrice(getPrice());

        entityYearModelClassImpl.resetOriginalValues();

        return entityYearModelClassImpl;
    }

    @Override
    public int compareTo(EntityYearModelClass entityYearModelClass) {
        EntityYearModelClassPK primaryKey = entityYearModelClass.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityYearModelClass)) {
            return false;
        }

        EntityYearModelClass entityYearModelClass = (EntityYearModelClass) obj;

        EntityYearModelClassPK primaryKey = entityYearModelClass.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<EntityYearModelClass> toCacheModel() {
        EntityYearModelClassCacheModel entityYearModelClassCacheModel = new EntityYearModelClassCacheModel();

        entityYearModelClassCacheModel.classId = getClassId();

        entityYearModelClassCacheModel.yearModel = getYearModel();

        entityYearModelClassCacheModel.startKilometer = getStartKilometer();

        entityYearModelClassCacheModel.finishKilometers = getFinishKilometers();

        entityYearModelClassCacheModel.price = getPrice();

        return entityYearModelClassCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{classId=");
        sb.append(getClassId());
        sb.append(", yearModel=");
        sb.append(getYearModel());
        sb.append(", startKilometer=");
        sb.append(getStartKilometer());
        sb.append(", finishKilometers=");
        sb.append(getFinishKilometers());
        sb.append(", price=");
        sb.append(getPrice());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityYearModelClass");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>classId</column-name><column-value><![CDATA[");
        sb.append(getClassId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>yearModel</column-name><column-value><![CDATA[");
        sb.append(getYearModel());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startKilometer</column-name><column-value><![CDATA[");
        sb.append(getStartKilometer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>finishKilometers</column-name><column-value><![CDATA[");
        sb.append(getFinishKilometers());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>price</column-name><column-value><![CDATA[");
        sb.append(getPrice());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
