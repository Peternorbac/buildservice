package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityDealer;
import com.consistent.ucwrt.model.EntityDealerModel;
import com.consistent.ucwrt.model.EntityDealerSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityDealer service. Represents a row in the &quot;Dealer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityDealerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityDealerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityDealerImpl
 * @see com.consistent.ucwrt.model.EntityDealer
 * @see com.consistent.ucwrt.model.EntityDealerModel
 * @generated
 */
@JSON(strict = true)
public class EntityDealerModelImpl extends BaseModelImpl<EntityDealer>
    implements EntityDealerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity dealer model instance should use the {@link com.consistent.ucwrt.model.EntityDealer} interface instead.
     */
    public static final String TABLE_NAME = "Dealer";
    public static final Object[][] TABLE_COLUMNS = {
            { "dealerId", Types.VARCHAR },
            { "dealerName", Types.VARCHAR },
            { "guaranteed", Types.VARCHAR },
            { "generalManagerName", Types.VARCHAR },
            { "shareholderName", Types.VARCHAR },
            { "mailShareholder", Types.VARCHAR },
            { "mailGeneralManager", Types.VARCHAR },
            { "businessBrandName", Types.VARCHAR },
            { "zoneName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Dealer (dealerId VARCHAR(75) not null primary key,dealerName VARCHAR(75) null,guaranteed VARCHAR(75) null,generalManagerName VARCHAR(75) null,shareholderName VARCHAR(75) null,mailShareholder VARCHAR(75) null,mailGeneralManager VARCHAR(75) null,businessBrandName VARCHAR(75) null,zoneName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Dealer";
    public static final String ORDER_BY_JPQL = " ORDER BY entityDealer.dealerId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Dealer.dealerId ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityDealer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityDealer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.consistent.ucwrt.model.EntityDealer"),
            true);
    public static long DEALERID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityDealer"));
    private static ClassLoader _classLoader = EntityDealer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityDealer.class
        };
    private String _dealerId;
    private String _originalDealerId;
    private String _dealerName;
    private String _guaranteed;
    private String _generalManagerName;
    private String _shareholderName;
    private String _mailShareholder;
    private String _mailGeneralManager;
    private String _businessBrandName;
    private String _zoneName;
    private long _columnBitmask;
    private EntityDealer _escapedModel;

    public EntityDealerModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityDealer toModel(EntityDealerSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityDealer model = new EntityDealerImpl();

        model.setDealerId(soapModel.getDealerId());
        model.setDealerName(soapModel.getDealerName());
        model.setGuaranteed(soapModel.getGuaranteed());
        model.setGeneralManagerName(soapModel.getGeneralManagerName());
        model.setShareholderName(soapModel.getShareholderName());
        model.setMailShareholder(soapModel.getMailShareholder());
        model.setMailGeneralManager(soapModel.getMailGeneralManager());
        model.setBusinessBrandName(soapModel.getBusinessBrandName());
        model.setZoneName(soapModel.getZoneName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityDealer> toModels(EntityDealerSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityDealer> models = new ArrayList<EntityDealer>(soapModels.length);

        for (EntityDealerSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _dealerId;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setDealerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _dealerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return EntityDealer.class;
    }

    @Override
    public String getModelClassName() {
        return EntityDealer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("dealerId", getDealerId());
        attributes.put("dealerName", getDealerName());
        attributes.put("guaranteed", getGuaranteed());
        attributes.put("generalManagerName", getGeneralManagerName());
        attributes.put("shareholderName", getShareholderName());
        attributes.put("mailShareholder", getMailShareholder());
        attributes.put("mailGeneralManager", getMailGeneralManager());
        attributes.put("businessBrandName", getBusinessBrandName());
        attributes.put("zoneName", getZoneName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String dealerId = (String) attributes.get("dealerId");

        if (dealerId != null) {
            setDealerId(dealerId);
        }

        String dealerName = (String) attributes.get("dealerName");

        if (dealerName != null) {
            setDealerName(dealerName);
        }

        String guaranteed = (String) attributes.get("guaranteed");

        if (guaranteed != null) {
            setGuaranteed(guaranteed);
        }

        String generalManagerName = (String) attributes.get(
                "generalManagerName");

        if (generalManagerName != null) {
            setGeneralManagerName(generalManagerName);
        }

        String shareholderName = (String) attributes.get("shareholderName");

        if (shareholderName != null) {
            setShareholderName(shareholderName);
        }

        String mailShareholder = (String) attributes.get("mailShareholder");

        if (mailShareholder != null) {
            setMailShareholder(mailShareholder);
        }

        String mailGeneralManager = (String) attributes.get(
                "mailGeneralManager");

        if (mailGeneralManager != null) {
            setMailGeneralManager(mailGeneralManager);
        }

        String businessBrandName = (String) attributes.get("businessBrandName");

        if (businessBrandName != null) {
            setBusinessBrandName(businessBrandName);
        }

        String zoneName = (String) attributes.get("zoneName");

        if (zoneName != null) {
            setZoneName(zoneName);
        }
    }

    @JSON
    @Override
    public String getDealerId() {
        if (_dealerId == null) {
            return StringPool.BLANK;
        } else {
            return _dealerId;
        }
    }

    @Override
    public void setDealerId(String dealerId) {
        _columnBitmask |= DEALERID_COLUMN_BITMASK;

        if (_originalDealerId == null) {
            _originalDealerId = _dealerId;
        }

        _dealerId = dealerId;
    }

    public String getOriginalDealerId() {
        return GetterUtil.getString(_originalDealerId);
    }

    @JSON
    @Override
    public String getDealerName() {
        if (_dealerName == null) {
            return StringPool.BLANK;
        } else {
            return _dealerName;
        }
    }

    @Override
    public void setDealerName(String dealerName) {
        _dealerName = dealerName;
    }

    @JSON
    @Override
    public String getGuaranteed() {
        if (_guaranteed == null) {
            return StringPool.BLANK;
        } else {
            return _guaranteed;
        }
    }

    @Override
    public void setGuaranteed(String guaranteed) {
        _guaranteed = guaranteed;
    }

    @JSON
    @Override
    public String getGeneralManagerName() {
        if (_generalManagerName == null) {
            return StringPool.BLANK;
        } else {
            return _generalManagerName;
        }
    }

    @Override
    public void setGeneralManagerName(String generalManagerName) {
        _generalManagerName = generalManagerName;
    }

    @JSON
    @Override
    public String getShareholderName() {
        if (_shareholderName == null) {
            return StringPool.BLANK;
        } else {
            return _shareholderName;
        }
    }

    @Override
    public void setShareholderName(String shareholderName) {
        _shareholderName = shareholderName;
    }

    @JSON
    @Override
    public String getMailShareholder() {
        if (_mailShareholder == null) {
            return StringPool.BLANK;
        } else {
            return _mailShareholder;
        }
    }

    @Override
    public void setMailShareholder(String mailShareholder) {
        _mailShareholder = mailShareholder;
    }

    @JSON
    @Override
    public String getMailGeneralManager() {
        if (_mailGeneralManager == null) {
            return StringPool.BLANK;
        } else {
            return _mailGeneralManager;
        }
    }

    @Override
    public void setMailGeneralManager(String mailGeneralManager) {
        _mailGeneralManager = mailGeneralManager;
    }

    @JSON
    @Override
    public String getBusinessBrandName() {
        if (_businessBrandName == null) {
            return StringPool.BLANK;
        } else {
            return _businessBrandName;
        }
    }

    @Override
    public void setBusinessBrandName(String businessBrandName) {
        _businessBrandName = businessBrandName;
    }

    @JSON
    @Override
    public String getZoneName() {
        if (_zoneName == null) {
            return StringPool.BLANK;
        } else {
            return _zoneName;
        }
    }

    @Override
    public void setZoneName(String zoneName) {
        _zoneName = zoneName;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public EntityDealer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityDealer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityDealerImpl entityDealerImpl = new EntityDealerImpl();

        entityDealerImpl.setDealerId(getDealerId());
        entityDealerImpl.setDealerName(getDealerName());
        entityDealerImpl.setGuaranteed(getGuaranteed());
        entityDealerImpl.setGeneralManagerName(getGeneralManagerName());
        entityDealerImpl.setShareholderName(getShareholderName());
        entityDealerImpl.setMailShareholder(getMailShareholder());
        entityDealerImpl.setMailGeneralManager(getMailGeneralManager());
        entityDealerImpl.setBusinessBrandName(getBusinessBrandName());
        entityDealerImpl.setZoneName(getZoneName());

        entityDealerImpl.resetOriginalValues();

        return entityDealerImpl;
    }

    @Override
    public int compareTo(EntityDealer entityDealer) {
        String primaryKey = entityDealer.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityDealer)) {
            return false;
        }

        EntityDealer entityDealer = (EntityDealer) obj;

        String primaryKey = entityDealer.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        EntityDealerModelImpl entityDealerModelImpl = this;

        entityDealerModelImpl._originalDealerId = entityDealerModelImpl._dealerId;

        entityDealerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EntityDealer> toCacheModel() {
        EntityDealerCacheModel entityDealerCacheModel = new EntityDealerCacheModel();

        entityDealerCacheModel.dealerId = getDealerId();

        String dealerId = entityDealerCacheModel.dealerId;

        if ((dealerId != null) && (dealerId.length() == 0)) {
            entityDealerCacheModel.dealerId = null;
        }

        entityDealerCacheModel.dealerName = getDealerName();

        String dealerName = entityDealerCacheModel.dealerName;

        if ((dealerName != null) && (dealerName.length() == 0)) {
            entityDealerCacheModel.dealerName = null;
        }

        entityDealerCacheModel.guaranteed = getGuaranteed();

        String guaranteed = entityDealerCacheModel.guaranteed;

        if ((guaranteed != null) && (guaranteed.length() == 0)) {
            entityDealerCacheModel.guaranteed = null;
        }

        entityDealerCacheModel.generalManagerName = getGeneralManagerName();

        String generalManagerName = entityDealerCacheModel.generalManagerName;

        if ((generalManagerName != null) && (generalManagerName.length() == 0)) {
            entityDealerCacheModel.generalManagerName = null;
        }

        entityDealerCacheModel.shareholderName = getShareholderName();

        String shareholderName = entityDealerCacheModel.shareholderName;

        if ((shareholderName != null) && (shareholderName.length() == 0)) {
            entityDealerCacheModel.shareholderName = null;
        }

        entityDealerCacheModel.mailShareholder = getMailShareholder();

        String mailShareholder = entityDealerCacheModel.mailShareholder;

        if ((mailShareholder != null) && (mailShareholder.length() == 0)) {
            entityDealerCacheModel.mailShareholder = null;
        }

        entityDealerCacheModel.mailGeneralManager = getMailGeneralManager();

        String mailGeneralManager = entityDealerCacheModel.mailGeneralManager;

        if ((mailGeneralManager != null) && (mailGeneralManager.length() == 0)) {
            entityDealerCacheModel.mailGeneralManager = null;
        }

        entityDealerCacheModel.businessBrandName = getBusinessBrandName();

        String businessBrandName = entityDealerCacheModel.businessBrandName;

        if ((businessBrandName != null) && (businessBrandName.length() == 0)) {
            entityDealerCacheModel.businessBrandName = null;
        }

        entityDealerCacheModel.zoneName = getZoneName();

        String zoneName = entityDealerCacheModel.zoneName;

        if ((zoneName != null) && (zoneName.length() == 0)) {
            entityDealerCacheModel.zoneName = null;
        }

        return entityDealerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{dealerId=");
        sb.append(getDealerId());
        sb.append(", dealerName=");
        sb.append(getDealerName());
        sb.append(", guaranteed=");
        sb.append(getGuaranteed());
        sb.append(", generalManagerName=");
        sb.append(getGeneralManagerName());
        sb.append(", shareholderName=");
        sb.append(getShareholderName());
        sb.append(", mailShareholder=");
        sb.append(getMailShareholder());
        sb.append(", mailGeneralManager=");
        sb.append(getMailGeneralManager());
        sb.append(", businessBrandName=");
        sb.append(getBusinessBrandName());
        sb.append(", zoneName=");
        sb.append(getZoneName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityDealer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>dealerId</column-name><column-value><![CDATA[");
        sb.append(getDealerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dealerName</column-name><column-value><![CDATA[");
        sb.append(getDealerName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>guaranteed</column-name><column-value><![CDATA[");
        sb.append(getGuaranteed());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>generalManagerName</column-name><column-value><![CDATA[");
        sb.append(getGeneralManagerName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shareholderName</column-name><column-value><![CDATA[");
        sb.append(getShareholderName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mailShareholder</column-name><column-value><![CDATA[");
        sb.append(getMailShareholder());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mailGeneralManager</column-name><column-value><![CDATA[");
        sb.append(getMailGeneralManager());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessBrandName</column-name><column-value><![CDATA[");
        sb.append(getBusinessBrandName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>zoneName</column-name><column-value><![CDATA[");
        sb.append(getZoneName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
