package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityInventoryClasification;
import com.consistent.ucwrt.model.EntityInventoryClasificationModel;
import com.consistent.ucwrt.model.EntityInventoryClasificationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityInventoryClasification service. Represents a row in the &quot;InventoryClasification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityInventoryClasificationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityInventoryClasificationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityInventoryClasificationImpl
 * @see com.consistent.ucwrt.model.EntityInventoryClasification
 * @see com.consistent.ucwrt.model.EntityInventoryClasificationModel
 * @generated
 */
@JSON(strict = true)
public class EntityInventoryClasificationModelImpl extends BaseModelImpl<EntityInventoryClasification>
    implements EntityInventoryClasificationModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity inventory clasification model instance should use the {@link com.consistent.ucwrt.model.EntityInventoryClasification} interface instead.
     */
    public static final String TABLE_NAME = "InventoryClasification";
    public static final Object[][] TABLE_COLUMNS = {
            { "inventoryClasificationId", Types.INTEGER },
            { "inventoryClasification", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table InventoryClasification (inventoryClasificationId INTEGER not null primary key,inventoryClasification VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table InventoryClasification";
    public static final String ORDER_BY_JPQL = " ORDER BY entityInventoryClasification.inventoryClasificationId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY InventoryClasification.inventoryClasificationId ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityInventoryClasification"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityInventoryClasification"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityInventoryClasification"));
    private static ClassLoader _classLoader = EntityInventoryClasification.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityInventoryClasification.class
        };
    private int _inventoryClasificationId;
    private String _inventoryClasification;
    private EntityInventoryClasification _escapedModel;

    public EntityInventoryClasificationModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityInventoryClasification toModel(
        EntityInventoryClasificationSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityInventoryClasification model = new EntityInventoryClasificationImpl();

        model.setInventoryClasificationId(soapModel.getInventoryClasificationId());
        model.setInventoryClasification(soapModel.getInventoryClasification());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityInventoryClasification> toModels(
        EntityInventoryClasificationSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityInventoryClasification> models = new ArrayList<EntityInventoryClasification>(soapModels.length);

        for (EntityInventoryClasificationSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _inventoryClasificationId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setInventoryClasificationId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _inventoryClasificationId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EntityInventoryClasification.class;
    }

    @Override
    public String getModelClassName() {
        return EntityInventoryClasification.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("inventoryClasificationId", getInventoryClasificationId());
        attributes.put("inventoryClasification", getInventoryClasification());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer inventoryClasificationId = (Integer) attributes.get(
                "inventoryClasificationId");

        if (inventoryClasificationId != null) {
            setInventoryClasificationId(inventoryClasificationId);
        }

        String inventoryClasification = (String) attributes.get(
                "inventoryClasification");

        if (inventoryClasification != null) {
            setInventoryClasification(inventoryClasification);
        }
    }

    @JSON
    @Override
    public int getInventoryClasificationId() {
        return _inventoryClasificationId;
    }

    @Override
    public void setInventoryClasificationId(int inventoryClasificationId) {
        _inventoryClasificationId = inventoryClasificationId;
    }

    @JSON
    @Override
    public String getInventoryClasification() {
        if (_inventoryClasification == null) {
            return StringPool.BLANK;
        } else {
            return _inventoryClasification;
        }
    }

    @Override
    public void setInventoryClasification(String inventoryClasification) {
        _inventoryClasification = inventoryClasification;
    }

    @Override
    public EntityInventoryClasification toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityInventoryClasification) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityInventoryClasificationImpl entityInventoryClasificationImpl = new EntityInventoryClasificationImpl();

        entityInventoryClasificationImpl.setInventoryClasificationId(getInventoryClasificationId());
        entityInventoryClasificationImpl.setInventoryClasification(getInventoryClasification());

        entityInventoryClasificationImpl.resetOriginalValues();

        return entityInventoryClasificationImpl;
    }

    @Override
    public int compareTo(
        EntityInventoryClasification entityInventoryClasification) {
        int primaryKey = entityInventoryClasification.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityInventoryClasification)) {
            return false;
        }

        EntityInventoryClasification entityInventoryClasification = (EntityInventoryClasification) obj;

        int primaryKey = entityInventoryClasification.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<EntityInventoryClasification> toCacheModel() {
        EntityInventoryClasificationCacheModel entityInventoryClasificationCacheModel =
            new EntityInventoryClasificationCacheModel();

        entityInventoryClasificationCacheModel.inventoryClasificationId = getInventoryClasificationId();

        entityInventoryClasificationCacheModel.inventoryClasification = getInventoryClasification();

        String inventoryClasification = entityInventoryClasificationCacheModel.inventoryClasification;

        if ((inventoryClasification != null) &&
                (inventoryClasification.length() == 0)) {
            entityInventoryClasificationCacheModel.inventoryClasification = null;
        }

        return entityInventoryClasificationCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{inventoryClasificationId=");
        sb.append(getInventoryClasificationId());
        sb.append(", inventoryClasification=");
        sb.append(getInventoryClasification());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityInventoryClasification");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>inventoryClasificationId</column-name><column-value><![CDATA[");
        sb.append(getInventoryClasificationId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inventoryClasification</column-name><column-value><![CDATA[");
        sb.append(getInventoryClasification());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
