package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityYearModel;
import com.consistent.ucwrt.model.EntityYearModelModel;
import com.consistent.ucwrt.model.EntityYearModelSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityYearModel service. Represents a row in the &quot;YearModel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityYearModelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityYearModelImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityYearModelImpl
 * @see com.consistent.ucwrt.model.EntityYearModel
 * @see com.consistent.ucwrt.model.EntityYearModelModel
 * @generated
 */
@JSON(strict = true)
public class EntityYearModelModelImpl extends BaseModelImpl<EntityYearModel>
    implements EntityYearModelModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity year model model instance should use the {@link com.consistent.ucwrt.model.EntityYearModel} interface instead.
     */
    public static final String TABLE_NAME = "YearModel";
    public static final Object[][] TABLE_COLUMNS = {
            { "yearModel", Types.INTEGER },
            { "yearModelRegistrationDate", Types.TIMESTAMP },
            { "yearModelRegisterData", Types.VARCHAR },
            { "yModelResponsibleUser", Types.VARCHAR },
            { "yearModelDescription", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table YearModel (yearModel INTEGER not null primary key,yearModelRegistrationDate DATE null,yearModelRegisterData VARCHAR(75) null,yModelResponsibleUser VARCHAR(75) null,yearModelDescription VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table YearModel";
    public static final String ORDER_BY_JPQL = " ORDER BY entityYearModel.yearModel ASC";
    public static final String ORDER_BY_SQL = " ORDER BY YearModel.yearModel ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityYearModel"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityYearModel"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityYearModel"));
    private static ClassLoader _classLoader = EntityYearModel.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityYearModel.class
        };
    private int _yearModel;
    private Date _yearModelRegistrationDate;
    private String _yearModelRegisterData;
    private String _yModelResponsibleUser;
    private String _yearModelDescription;
    private EntityYearModel _escapedModel;

    public EntityYearModelModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityYearModel toModel(EntityYearModelSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityYearModel model = new EntityYearModelImpl();

        model.setYearModel(soapModel.getYearModel());
        model.setYearModelRegistrationDate(soapModel.getYearModelRegistrationDate());
        model.setYearModelRegisterData(soapModel.getYearModelRegisterData());
        model.setYModelResponsibleUser(soapModel.getYModelResponsibleUser());
        model.setYearModelDescription(soapModel.getYearModelDescription());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityYearModel> toModels(
        EntityYearModelSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityYearModel> models = new ArrayList<EntityYearModel>(soapModels.length);

        for (EntityYearModelSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _yearModel;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setYearModel(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _yearModel;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EntityYearModel.class;
    }

    @Override
    public String getModelClassName() {
        return EntityYearModel.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("yearModel", getYearModel());
        attributes.put("yearModelRegistrationDate",
            getYearModelRegistrationDate());
        attributes.put("yearModelRegisterData", getYearModelRegisterData());
        attributes.put("yModelResponsibleUser", getYModelResponsibleUser());
        attributes.put("yearModelDescription", getYearModelDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer yearModel = (Integer) attributes.get("yearModel");

        if (yearModel != null) {
            setYearModel(yearModel);
        }

        Date yearModelRegistrationDate = (Date) attributes.get(
                "yearModelRegistrationDate");

        if (yearModelRegistrationDate != null) {
            setYearModelRegistrationDate(yearModelRegistrationDate);
        }

        String yearModelRegisterData = (String) attributes.get(
                "yearModelRegisterData");

        if (yearModelRegisterData != null) {
            setYearModelRegisterData(yearModelRegisterData);
        }

        String yModelResponsibleUser = (String) attributes.get(
                "yModelResponsibleUser");

        if (yModelResponsibleUser != null) {
            setYModelResponsibleUser(yModelResponsibleUser);
        }

        String yearModelDescription = (String) attributes.get(
                "yearModelDescription");

        if (yearModelDescription != null) {
            setYearModelDescription(yearModelDescription);
        }
    }

    @JSON
    @Override
    public int getYearModel() {
        return _yearModel;
    }

    @Override
    public void setYearModel(int yearModel) {
        _yearModel = yearModel;
    }

    @JSON
    @Override
    public Date getYearModelRegistrationDate() {
        return _yearModelRegistrationDate;
    }

    @Override
    public void setYearModelRegistrationDate(Date yearModelRegistrationDate) {
        _yearModelRegistrationDate = yearModelRegistrationDate;
    }

    @JSON
    @Override
    public String getYearModelRegisterData() {
        if (_yearModelRegisterData == null) {
            return StringPool.BLANK;
        } else {
            return _yearModelRegisterData;
        }
    }

    @Override
    public void setYearModelRegisterData(String yearModelRegisterData) {
        _yearModelRegisterData = yearModelRegisterData;
    }

    @JSON
    @Override
    public String getYModelResponsibleUser() {
        if (_yModelResponsibleUser == null) {
            return StringPool.BLANK;
        } else {
            return _yModelResponsibleUser;
        }
    }

    @Override
    public void setYModelResponsibleUser(String yModelResponsibleUser) {
        _yModelResponsibleUser = yModelResponsibleUser;
    }

    @JSON
    @Override
    public String getYearModelDescription() {
        if (_yearModelDescription == null) {
            return StringPool.BLANK;
        } else {
            return _yearModelDescription;
        }
    }

    @Override
    public void setYearModelDescription(String yearModelDescription) {
        _yearModelDescription = yearModelDescription;
    }

    @Override
    public EntityYearModel toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityYearModel) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityYearModelImpl entityYearModelImpl = new EntityYearModelImpl();

        entityYearModelImpl.setYearModel(getYearModel());
        entityYearModelImpl.setYearModelRegistrationDate(getYearModelRegistrationDate());
        entityYearModelImpl.setYearModelRegisterData(getYearModelRegisterData());
        entityYearModelImpl.setYModelResponsibleUser(getYModelResponsibleUser());
        entityYearModelImpl.setYearModelDescription(getYearModelDescription());

        entityYearModelImpl.resetOriginalValues();

        return entityYearModelImpl;
    }

    @Override
    public int compareTo(EntityYearModel entityYearModel) {
        int primaryKey = entityYearModel.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityYearModel)) {
            return false;
        }

        EntityYearModel entityYearModel = (EntityYearModel) obj;

        int primaryKey = entityYearModel.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<EntityYearModel> toCacheModel() {
        EntityYearModelCacheModel entityYearModelCacheModel = new EntityYearModelCacheModel();

        entityYearModelCacheModel.yearModel = getYearModel();

        Date yearModelRegistrationDate = getYearModelRegistrationDate();

        if (yearModelRegistrationDate != null) {
            entityYearModelCacheModel.yearModelRegistrationDate = yearModelRegistrationDate.getTime();
        } else {
            entityYearModelCacheModel.yearModelRegistrationDate = Long.MIN_VALUE;
        }

        entityYearModelCacheModel.yearModelRegisterData = getYearModelRegisterData();

        String yearModelRegisterData = entityYearModelCacheModel.yearModelRegisterData;

        if ((yearModelRegisterData != null) &&
                (yearModelRegisterData.length() == 0)) {
            entityYearModelCacheModel.yearModelRegisterData = null;
        }

        entityYearModelCacheModel.yModelResponsibleUser = getYModelResponsibleUser();

        String yModelResponsibleUser = entityYearModelCacheModel.yModelResponsibleUser;

        if ((yModelResponsibleUser != null) &&
                (yModelResponsibleUser.length() == 0)) {
            entityYearModelCacheModel.yModelResponsibleUser = null;
        }

        entityYearModelCacheModel.yearModelDescription = getYearModelDescription();

        String yearModelDescription = entityYearModelCacheModel.yearModelDescription;

        if ((yearModelDescription != null) &&
                (yearModelDescription.length() == 0)) {
            entityYearModelCacheModel.yearModelDescription = null;
        }

        return entityYearModelCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{yearModel=");
        sb.append(getYearModel());
        sb.append(", yearModelRegistrationDate=");
        sb.append(getYearModelRegistrationDate());
        sb.append(", yearModelRegisterData=");
        sb.append(getYearModelRegisterData());
        sb.append(", yModelResponsibleUser=");
        sb.append(getYModelResponsibleUser());
        sb.append(", yearModelDescription=");
        sb.append(getYearModelDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityYearModel");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>yearModel</column-name><column-value><![CDATA[");
        sb.append(getYearModel());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>yearModelRegistrationDate</column-name><column-value><![CDATA[");
        sb.append(getYearModelRegistrationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>yearModelRegisterData</column-name><column-value><![CDATA[");
        sb.append(getYearModelRegisterData());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>yModelResponsibleUser</column-name><column-value><![CDATA[");
        sb.append(getYModelResponsibleUser());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>yearModelDescription</column-name><column-value><![CDATA[");
        sb.append(getYearModelDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
