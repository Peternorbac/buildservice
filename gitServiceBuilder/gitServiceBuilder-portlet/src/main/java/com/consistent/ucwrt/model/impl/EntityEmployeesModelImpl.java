package com.consistent.ucwrt.model.impl;

import com.consistent.ucwrt.model.EntityEmployees;
import com.consistent.ucwrt.model.EntityEmployeesModel;
import com.consistent.ucwrt.model.EntityEmployeesSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntityEmployees service. Represents a row in the &quot;Employees&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.consistent.ucwrt.model.EntityEmployeesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityEmployeesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityEmployeesImpl
 * @see com.consistent.ucwrt.model.EntityEmployees
 * @see com.consistent.ucwrt.model.EntityEmployeesModel
 * @generated
 */
@JSON(strict = true)
public class EntityEmployeesModelImpl extends BaseModelImpl<EntityEmployees>
    implements EntityEmployeesModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entity employees model instance should use the {@link com.consistent.ucwrt.model.EntityEmployees} interface instead.
     */
    public static final String TABLE_NAME = "Employees";
    public static final Object[][] TABLE_COLUMNS = {
            { "employeeId", Types.INTEGER },
            { "firstName", Types.VARCHAR },
            { "lastName", Types.VARCHAR },
            { "secondLastName", Types.VARCHAR },
            { "marketStall", Types.VARCHAR },
            { "department", Types.VARCHAR },
            { "cellPhone", Types.VARCHAR },
            { "phone", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "certified", Types.VARCHAR },
            { "certifiedDate", Types.TIMESTAMP },
            { "certificationNumber", Types.VARCHAR },
            { "registrationDate", Types.TIMESTAMP },
            { "status", Types.VARCHAR },
            { "comments", Types.VARCHAR },
            { "departmentId", Types.VARCHAR },
            { "employmentId", Types.VARCHAR },
            { "dealerId", Types.VARCHAR },
            { "businessBrandName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Employees (employeeId INTEGER not null primary key,firstName VARCHAR(75) null,lastName VARCHAR(75) null,secondLastName VARCHAR(75) null,marketStall VARCHAR(75) null,department VARCHAR(75) null,cellPhone VARCHAR(75) null,phone VARCHAR(75) null,email VARCHAR(75) null,certified VARCHAR(75) null,certifiedDate DATE null,certificationNumber VARCHAR(75) null,registrationDate DATE null,status VARCHAR(75) null,comments VARCHAR(75) null,departmentId VARCHAR(75) null,employmentId VARCHAR(75) null,dealerId VARCHAR(75) null,businessBrandName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Employees";
    public static final String ORDER_BY_JPQL = " ORDER BY entityEmployees.employeeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Employees.employeeId ASC";
    public static final String DATA_SOURCE = "ucwrtDataSource";
    public static final String SESSION_FACTORY = "ucwrtSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.consistent.ucwrt.model.EntityEmployees"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.consistent.ucwrt.model.EntityEmployees"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.consistent.ucwrt.model.EntityEmployees"),
            true);
    public static long BUSINESSBRANDNAME_COLUMN_BITMASK = 1L;
    public static long DEALERID_COLUMN_BITMASK = 2L;
    public static long EMPLOYEEID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.consistent.ucwrt.model.EntityEmployees"));
    private static ClassLoader _classLoader = EntityEmployees.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityEmployees.class
        };
    private int _employeeId;
    private String _firstName;
    private String _lastName;
    private String _secondLastName;
    private String _marketStall;
    private String _department;
    private String _cellPhone;
    private String _phone;
    private String _email;
    private String _certified;
    private Date _certifiedDate;
    private String _certificationNumber;
    private Date _registrationDate;
    private String _status;
    private String _comments;
    private String _departmentId;
    private String _employmentId;
    private String _dealerId;
    private String _originalDealerId;
    private String _businessBrandName;
    private String _originalBusinessBrandName;
    private long _columnBitmask;
    private EntityEmployees _escapedModel;

    public EntityEmployeesModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EntityEmployees toModel(EntityEmployeesSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EntityEmployees model = new EntityEmployeesImpl();

        model.setEmployeeId(soapModel.getEmployeeId());
        model.setFirstName(soapModel.getFirstName());
        model.setLastName(soapModel.getLastName());
        model.setSecondLastName(soapModel.getSecondLastName());
        model.setMarketStall(soapModel.getMarketStall());
        model.setDepartment(soapModel.getDepartment());
        model.setCellPhone(soapModel.getCellPhone());
        model.setPhone(soapModel.getPhone());
        model.setEmail(soapModel.getEmail());
        model.setCertified(soapModel.getCertified());
        model.setCertifiedDate(soapModel.getCertifiedDate());
        model.setCertificationNumber(soapModel.getCertificationNumber());
        model.setRegistrationDate(soapModel.getRegistrationDate());
        model.setStatus(soapModel.getStatus());
        model.setComments(soapModel.getComments());
        model.setDepartmentId(soapModel.getDepartmentId());
        model.setEmploymentId(soapModel.getEmploymentId());
        model.setDealerId(soapModel.getDealerId());
        model.setBusinessBrandName(soapModel.getBusinessBrandName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EntityEmployees> toModels(
        EntityEmployeesSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EntityEmployees> models = new ArrayList<EntityEmployees>(soapModels.length);

        for (EntityEmployeesSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setEmployeeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EntityEmployees.class;
    }

    @Override
    public String getModelClassName() {
        return EntityEmployees.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("employeeId", getEmployeeId());
        attributes.put("firstName", getFirstName());
        attributes.put("lastName", getLastName());
        attributes.put("secondLastName", getSecondLastName());
        attributes.put("marketStall", getMarketStall());
        attributes.put("department", getDepartment());
        attributes.put("cellPhone", getCellPhone());
        attributes.put("phone", getPhone());
        attributes.put("email", getEmail());
        attributes.put("certified", getCertified());
        attributes.put("certifiedDate", getCertifiedDate());
        attributes.put("certificationNumber", getCertificationNumber());
        attributes.put("registrationDate", getRegistrationDate());
        attributes.put("status", getStatus());
        attributes.put("comments", getComments());
        attributes.put("departmentId", getDepartmentId());
        attributes.put("employmentId", getEmploymentId());
        attributes.put("dealerId", getDealerId());
        attributes.put("businessBrandName", getBusinessBrandName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer employeeId = (Integer) attributes.get("employeeId");

        if (employeeId != null) {
            setEmployeeId(employeeId);
        }

        String firstName = (String) attributes.get("firstName");

        if (firstName != null) {
            setFirstName(firstName);
        }

        String lastName = (String) attributes.get("lastName");

        if (lastName != null) {
            setLastName(lastName);
        }

        String secondLastName = (String) attributes.get("secondLastName");

        if (secondLastName != null) {
            setSecondLastName(secondLastName);
        }

        String marketStall = (String) attributes.get("marketStall");

        if (marketStall != null) {
            setMarketStall(marketStall);
        }

        String department = (String) attributes.get("department");

        if (department != null) {
            setDepartment(department);
        }

        String cellPhone = (String) attributes.get("cellPhone");

        if (cellPhone != null) {
            setCellPhone(cellPhone);
        }

        String phone = (String) attributes.get("phone");

        if (phone != null) {
            setPhone(phone);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String certified = (String) attributes.get("certified");

        if (certified != null) {
            setCertified(certified);
        }

        Date certifiedDate = (Date) attributes.get("certifiedDate");

        if (certifiedDate != null) {
            setCertifiedDate(certifiedDate);
        }

        String certificationNumber = (String) attributes.get(
                "certificationNumber");

        if (certificationNumber != null) {
            setCertificationNumber(certificationNumber);
        }

        Date registrationDate = (Date) attributes.get("registrationDate");

        if (registrationDate != null) {
            setRegistrationDate(registrationDate);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        String comments = (String) attributes.get("comments");

        if (comments != null) {
            setComments(comments);
        }

        String departmentId = (String) attributes.get("departmentId");

        if (departmentId != null) {
            setDepartmentId(departmentId);
        }

        String employmentId = (String) attributes.get("employmentId");

        if (employmentId != null) {
            setEmploymentId(employmentId);
        }

        String dealerId = (String) attributes.get("dealerId");

        if (dealerId != null) {
            setDealerId(dealerId);
        }

        String businessBrandName = (String) attributes.get("businessBrandName");

        if (businessBrandName != null) {
            setBusinessBrandName(businessBrandName);
        }
    }

    @JSON
    @Override
    public int getEmployeeId() {
        return _employeeId;
    }

    @Override
    public void setEmployeeId(int employeeId) {
        _employeeId = employeeId;
    }

    @JSON
    @Override
    public String getFirstName() {
        if (_firstName == null) {
            return StringPool.BLANK;
        } else {
            return _firstName;
        }
    }

    @Override
    public void setFirstName(String firstName) {
        _firstName = firstName;
    }

    @JSON
    @Override
    public String getLastName() {
        if (_lastName == null) {
            return StringPool.BLANK;
        } else {
            return _lastName;
        }
    }

    @Override
    public void setLastName(String lastName) {
        _lastName = lastName;
    }

    @JSON
    @Override
    public String getSecondLastName() {
        if (_secondLastName == null) {
            return StringPool.BLANK;
        } else {
            return _secondLastName;
        }
    }

    @Override
    public void setSecondLastName(String secondLastName) {
        _secondLastName = secondLastName;
    }

    @JSON
    @Override
    public String getMarketStall() {
        if (_marketStall == null) {
            return StringPool.BLANK;
        } else {
            return _marketStall;
        }
    }

    @Override
    public void setMarketStall(String marketStall) {
        _marketStall = marketStall;
    }

    @JSON
    @Override
    public String getDepartment() {
        if (_department == null) {
            return StringPool.BLANK;
        } else {
            return _department;
        }
    }

    @Override
    public void setDepartment(String department) {
        _department = department;
    }

    @JSON
    @Override
    public String getCellPhone() {
        if (_cellPhone == null) {
            return StringPool.BLANK;
        } else {
            return _cellPhone;
        }
    }

    @Override
    public void setCellPhone(String cellPhone) {
        _cellPhone = cellPhone;
    }

    @JSON
    @Override
    public String getPhone() {
        if (_phone == null) {
            return StringPool.BLANK;
        } else {
            return _phone;
        }
    }

    @Override
    public void setPhone(String phone) {
        _phone = phone;
    }

    @JSON
    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _email = email;
    }

    @JSON
    @Override
    public String getCertified() {
        if (_certified == null) {
            return StringPool.BLANK;
        } else {
            return _certified;
        }
    }

    @Override
    public void setCertified(String certified) {
        _certified = certified;
    }

    @JSON
    @Override
    public Date getCertifiedDate() {
        return _certifiedDate;
    }

    @Override
    public void setCertifiedDate(Date certifiedDate) {
        _certifiedDate = certifiedDate;
    }

    @JSON
    @Override
    public String getCertificationNumber() {
        if (_certificationNumber == null) {
            return StringPool.BLANK;
        } else {
            return _certificationNumber;
        }
    }

    @Override
    public void setCertificationNumber(String certificationNumber) {
        _certificationNumber = certificationNumber;
    }

    @JSON
    @Override
    public Date getRegistrationDate() {
        return _registrationDate;
    }

    @Override
    public void setRegistrationDate(Date registrationDate) {
        _registrationDate = registrationDate;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @JSON
    @Override
    public String getComments() {
        if (_comments == null) {
            return StringPool.BLANK;
        } else {
            return _comments;
        }
    }

    @Override
    public void setComments(String comments) {
        _comments = comments;
    }

    @JSON
    @Override
    public String getDepartmentId() {
        if (_departmentId == null) {
            return StringPool.BLANK;
        } else {
            return _departmentId;
        }
    }

    @Override
    public void setDepartmentId(String departmentId) {
        _departmentId = departmentId;
    }

    @JSON
    @Override
    public String getEmploymentId() {
        if (_employmentId == null) {
            return StringPool.BLANK;
        } else {
            return _employmentId;
        }
    }

    @Override
    public void setEmploymentId(String employmentId) {
        _employmentId = employmentId;
    }

    @JSON
    @Override
    public String getDealerId() {
        if (_dealerId == null) {
            return StringPool.BLANK;
        } else {
            return _dealerId;
        }
    }

    @Override
    public void setDealerId(String dealerId) {
        _columnBitmask |= DEALERID_COLUMN_BITMASK;

        if (_originalDealerId == null) {
            _originalDealerId = _dealerId;
        }

        _dealerId = dealerId;
    }

    public String getOriginalDealerId() {
        return GetterUtil.getString(_originalDealerId);
    }

    @JSON
    @Override
    public String getBusinessBrandName() {
        if (_businessBrandName == null) {
            return StringPool.BLANK;
        } else {
            return _businessBrandName;
        }
    }

    @Override
    public void setBusinessBrandName(String businessBrandName) {
        _columnBitmask |= BUSINESSBRANDNAME_COLUMN_BITMASK;

        if (_originalBusinessBrandName == null) {
            _originalBusinessBrandName = _businessBrandName;
        }

        _businessBrandName = businessBrandName;
    }

    public String getOriginalBusinessBrandName() {
        return GetterUtil.getString(_originalBusinessBrandName);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public EntityEmployees toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityEmployees) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityEmployeesImpl entityEmployeesImpl = new EntityEmployeesImpl();

        entityEmployeesImpl.setEmployeeId(getEmployeeId());
        entityEmployeesImpl.setFirstName(getFirstName());
        entityEmployeesImpl.setLastName(getLastName());
        entityEmployeesImpl.setSecondLastName(getSecondLastName());
        entityEmployeesImpl.setMarketStall(getMarketStall());
        entityEmployeesImpl.setDepartment(getDepartment());
        entityEmployeesImpl.setCellPhone(getCellPhone());
        entityEmployeesImpl.setPhone(getPhone());
        entityEmployeesImpl.setEmail(getEmail());
        entityEmployeesImpl.setCertified(getCertified());
        entityEmployeesImpl.setCertifiedDate(getCertifiedDate());
        entityEmployeesImpl.setCertificationNumber(getCertificationNumber());
        entityEmployeesImpl.setRegistrationDate(getRegistrationDate());
        entityEmployeesImpl.setStatus(getStatus());
        entityEmployeesImpl.setComments(getComments());
        entityEmployeesImpl.setDepartmentId(getDepartmentId());
        entityEmployeesImpl.setEmploymentId(getEmploymentId());
        entityEmployeesImpl.setDealerId(getDealerId());
        entityEmployeesImpl.setBusinessBrandName(getBusinessBrandName());

        entityEmployeesImpl.resetOriginalValues();

        return entityEmployeesImpl;
    }

    @Override
    public int compareTo(EntityEmployees entityEmployees) {
        int primaryKey = entityEmployees.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityEmployees)) {
            return false;
        }

        EntityEmployees entityEmployees = (EntityEmployees) obj;

        int primaryKey = entityEmployees.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EntityEmployeesModelImpl entityEmployeesModelImpl = this;

        entityEmployeesModelImpl._originalDealerId = entityEmployeesModelImpl._dealerId;

        entityEmployeesModelImpl._originalBusinessBrandName = entityEmployeesModelImpl._businessBrandName;

        entityEmployeesModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EntityEmployees> toCacheModel() {
        EntityEmployeesCacheModel entityEmployeesCacheModel = new EntityEmployeesCacheModel();

        entityEmployeesCacheModel.employeeId = getEmployeeId();

        entityEmployeesCacheModel.firstName = getFirstName();

        String firstName = entityEmployeesCacheModel.firstName;

        if ((firstName != null) && (firstName.length() == 0)) {
            entityEmployeesCacheModel.firstName = null;
        }

        entityEmployeesCacheModel.lastName = getLastName();

        String lastName = entityEmployeesCacheModel.lastName;

        if ((lastName != null) && (lastName.length() == 0)) {
            entityEmployeesCacheModel.lastName = null;
        }

        entityEmployeesCacheModel.secondLastName = getSecondLastName();

        String secondLastName = entityEmployeesCacheModel.secondLastName;

        if ((secondLastName != null) && (secondLastName.length() == 0)) {
            entityEmployeesCacheModel.secondLastName = null;
        }

        entityEmployeesCacheModel.marketStall = getMarketStall();

        String marketStall = entityEmployeesCacheModel.marketStall;

        if ((marketStall != null) && (marketStall.length() == 0)) {
            entityEmployeesCacheModel.marketStall = null;
        }

        entityEmployeesCacheModel.department = getDepartment();

        String department = entityEmployeesCacheModel.department;

        if ((department != null) && (department.length() == 0)) {
            entityEmployeesCacheModel.department = null;
        }

        entityEmployeesCacheModel.cellPhone = getCellPhone();

        String cellPhone = entityEmployeesCacheModel.cellPhone;

        if ((cellPhone != null) && (cellPhone.length() == 0)) {
            entityEmployeesCacheModel.cellPhone = null;
        }

        entityEmployeesCacheModel.phone = getPhone();

        String phone = entityEmployeesCacheModel.phone;

        if ((phone != null) && (phone.length() == 0)) {
            entityEmployeesCacheModel.phone = null;
        }

        entityEmployeesCacheModel.email = getEmail();

        String email = entityEmployeesCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            entityEmployeesCacheModel.email = null;
        }

        entityEmployeesCacheModel.certified = getCertified();

        String certified = entityEmployeesCacheModel.certified;

        if ((certified != null) && (certified.length() == 0)) {
            entityEmployeesCacheModel.certified = null;
        }

        Date certifiedDate = getCertifiedDate();

        if (certifiedDate != null) {
            entityEmployeesCacheModel.certifiedDate = certifiedDate.getTime();
        } else {
            entityEmployeesCacheModel.certifiedDate = Long.MIN_VALUE;
        }

        entityEmployeesCacheModel.certificationNumber = getCertificationNumber();

        String certificationNumber = entityEmployeesCacheModel.certificationNumber;

        if ((certificationNumber != null) &&
                (certificationNumber.length() == 0)) {
            entityEmployeesCacheModel.certificationNumber = null;
        }

        Date registrationDate = getRegistrationDate();

        if (registrationDate != null) {
            entityEmployeesCacheModel.registrationDate = registrationDate.getTime();
        } else {
            entityEmployeesCacheModel.registrationDate = Long.MIN_VALUE;
        }

        entityEmployeesCacheModel.status = getStatus();

        String status = entityEmployeesCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            entityEmployeesCacheModel.status = null;
        }

        entityEmployeesCacheModel.comments = getComments();

        String comments = entityEmployeesCacheModel.comments;

        if ((comments != null) && (comments.length() == 0)) {
            entityEmployeesCacheModel.comments = null;
        }

        entityEmployeesCacheModel.departmentId = getDepartmentId();

        String departmentId = entityEmployeesCacheModel.departmentId;

        if ((departmentId != null) && (departmentId.length() == 0)) {
            entityEmployeesCacheModel.departmentId = null;
        }

        entityEmployeesCacheModel.employmentId = getEmploymentId();

        String employmentId = entityEmployeesCacheModel.employmentId;

        if ((employmentId != null) && (employmentId.length() == 0)) {
            entityEmployeesCacheModel.employmentId = null;
        }

        entityEmployeesCacheModel.dealerId = getDealerId();

        String dealerId = entityEmployeesCacheModel.dealerId;

        if ((dealerId != null) && (dealerId.length() == 0)) {
            entityEmployeesCacheModel.dealerId = null;
        }

        entityEmployeesCacheModel.businessBrandName = getBusinessBrandName();

        String businessBrandName = entityEmployeesCacheModel.businessBrandName;

        if ((businessBrandName != null) && (businessBrandName.length() == 0)) {
            entityEmployeesCacheModel.businessBrandName = null;
        }

        return entityEmployeesCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(39);

        sb.append("{employeeId=");
        sb.append(getEmployeeId());
        sb.append(", firstName=");
        sb.append(getFirstName());
        sb.append(", lastName=");
        sb.append(getLastName());
        sb.append(", secondLastName=");
        sb.append(getSecondLastName());
        sb.append(", marketStall=");
        sb.append(getMarketStall());
        sb.append(", department=");
        sb.append(getDepartment());
        sb.append(", cellPhone=");
        sb.append(getCellPhone());
        sb.append(", phone=");
        sb.append(getPhone());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", certified=");
        sb.append(getCertified());
        sb.append(", certifiedDate=");
        sb.append(getCertifiedDate());
        sb.append(", certificationNumber=");
        sb.append(getCertificationNumber());
        sb.append(", registrationDate=");
        sb.append(getRegistrationDate());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", comments=");
        sb.append(getComments());
        sb.append(", departmentId=");
        sb.append(getDepartmentId());
        sb.append(", employmentId=");
        sb.append(getEmploymentId());
        sb.append(", dealerId=");
        sb.append(getDealerId());
        sb.append(", businessBrandName=");
        sb.append(getBusinessBrandName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(61);

        sb.append("<model><model-name>");
        sb.append("com.consistent.ucwrt.model.EntityEmployees");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>employeeId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstName</column-name><column-value><![CDATA[");
        sb.append(getFirstName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastName</column-name><column-value><![CDATA[");
        sb.append(getLastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>secondLastName</column-name><column-value><![CDATA[");
        sb.append(getSecondLastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>marketStall</column-name><column-value><![CDATA[");
        sb.append(getMarketStall());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>department</column-name><column-value><![CDATA[");
        sb.append(getDepartment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cellPhone</column-name><column-value><![CDATA[");
        sb.append(getCellPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>phone</column-name><column-value><![CDATA[");
        sb.append(getPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>certified</column-name><column-value><![CDATA[");
        sb.append(getCertified());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>certifiedDate</column-name><column-value><![CDATA[");
        sb.append(getCertifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>certificationNumber</column-name><column-value><![CDATA[");
        sb.append(getCertificationNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>registrationDate</column-name><column-value><![CDATA[");
        sb.append(getRegistrationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comments</column-name><column-value><![CDATA[");
        sb.append(getComments());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>departmentId</column-name><column-value><![CDATA[");
        sb.append(getDepartmentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employmentId</column-name><column-value><![CDATA[");
        sb.append(getEmploymentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dealerId</column-name><column-value><![CDATA[");
        sb.append(getDealerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>businessBrandName</column-name><column-value><![CDATA[");
        sb.append(getBusinessBrandName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
